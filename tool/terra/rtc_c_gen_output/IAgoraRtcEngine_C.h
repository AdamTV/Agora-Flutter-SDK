
    #ifndef IAGORARTCENGINE_C_H_
    #define IAGORARTCENGINE_C_H_
    
    #include <stdint.h>
    #include <stddef.h>
    
    
    
    #include "AgoraBase_C.h"
#include "AgoraMediaBase_C.h"
#include "IAgoraLog_C.h"

#include "IAudioDeviceManager_C.h"
#include "IAgoraRhythmPlayer_C.h"
#include "IAgoraMediaEngine_C.h"


typedef enum agora_rtc__MEDIA_DEVICE_TYPE__C
{
  UNKNOWN_AUDIO_DEVICE= -1,
AUDIO_PLAYOUT_DEVICE= 0,
AUDIO_RECORDING_DEVICE= 1,
VIDEO_RENDER_DEVICE= 2,
VIDEO_CAPTURE_DEVICE= 3,
AUDIO_APPLICATION_PLAYOUT_DEVICE= 4,
AUDIO_VIRTUAL_PLAYOUT_DEVICE= 5,
AUDIO_VIRTUAL_RECORDING_DEVICE= 6,
} agora_rtc__MEDIA_DEVICE_TYPE__C;


typedef enum agora_rtc__AUDIO_MIXING_STATE_TYPE__C
{
  AUDIO_MIXING_STATE_PLAYING= 710,
AUDIO_MIXING_STATE_PAUSED= 711,
AUDIO_MIXING_STATE_STOPPED= 713,
AUDIO_MIXING_STATE_FAILED= 714,
} agora_rtc__AUDIO_MIXING_STATE_TYPE__C;


typedef enum agora_rtc__AUDIO_MIXING_REASON_TYPE__C
{
  AUDIO_MIXING_REASON_CAN_NOT_OPEN= 701,
AUDIO_MIXING_REASON_TOO_FREQUENT_CALL= 702,
AUDIO_MIXING_REASON_INTERRUPTED_EOF= 703,
AUDIO_MIXING_REASON_ONE_LOOP_COMPLETED= 721,
AUDIO_MIXING_REASON_ALL_LOOPS_COMPLETED= 723,
AUDIO_MIXING_REASON_STOPPED_BY_USER= 724,
AUDIO_MIXING_REASON_OK= 0,
} agora_rtc__AUDIO_MIXING_REASON_TYPE__C;


typedef enum agora_rtc__INJECT_STREAM_STATUS__C
{
  INJECT_STREAM_STATUS_START_SUCCESS= 0,
INJECT_STREAM_STATUS_START_ALREADY_EXISTS= 1,
INJECT_STREAM_STATUS_START_UNAUTHORIZED= 2,
INJECT_STREAM_STATUS_START_TIMEDOUT= 3,
INJECT_STREAM_STATUS_START_FAILED= 4,
INJECT_STREAM_STATUS_STOP_SUCCESS= 5,
INJECT_STREAM_STATUS_STOP_NOT_FOUND= 6,
INJECT_STREAM_STATUS_STOP_UNAUTHORIZED= 7,
INJECT_STREAM_STATUS_STOP_TIMEDOUT= 8,
INJECT_STREAM_STATUS_STOP_FAILED= 9,
INJECT_STREAM_STATUS_BROKEN= 10,
} agora_rtc__INJECT_STREAM_STATUS__C;


typedef enum agora_rtc__AUDIO_EQUALIZATION_BAND_FREQUENCY__C
{
  AUDIO_EQUALIZATION_BAND_31= 0,
AUDIO_EQUALIZATION_BAND_62= 1,
AUDIO_EQUALIZATION_BAND_125= 2,
AUDIO_EQUALIZATION_BAND_250= 3,
AUDIO_EQUALIZATION_BAND_500= 4,
AUDIO_EQUALIZATION_BAND_1K= 5,
AUDIO_EQUALIZATION_BAND_2K= 6,
AUDIO_EQUALIZATION_BAND_4K= 7,
AUDIO_EQUALIZATION_BAND_8K= 8,
AUDIO_EQUALIZATION_BAND_16K= 9,
} agora_rtc__AUDIO_EQUALIZATION_BAND_FREQUENCY__C;


typedef enum agora_rtc__AUDIO_REVERB_TYPE__C
{
  AUDIO_REVERB_DRY_LEVEL= 0,
AUDIO_REVERB_WET_LEVEL= 1,
AUDIO_REVERB_ROOM_SIZE= 2,
AUDIO_REVERB_WET_DELAY= 3,
AUDIO_REVERB_STRENGTH= 4,
} agora_rtc__AUDIO_REVERB_TYPE__C;


typedef enum agora_rtc__STREAM_FALLBACK_OPTIONS__C
{
  STREAM_FALLBACK_OPTION_DISABLED= 0,
STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW= 1,
STREAM_FALLBACK_OPTION_AUDIO_ONLY= 2,
} agora_rtc__STREAM_FALLBACK_OPTIONS__C;


typedef enum agora_rtc__PRIORITY_TYPE__C
{
  PRIORITY_HIGH= 50,
PRIORITY_NORMAL= 100,
} agora_rtc__PRIORITY_TYPE__C;


typedef struct agora_rtc__LocalVideoStats__C
{
  agora_rtc__uid_t__C uid;
int sentBitrate;
int sentFrameRate;
int captureFrameRate;
int captureFrameWidth;
int captureFrameHeight;
int regulatedCaptureFrameRate;
int regulatedCaptureFrameWidth;
int regulatedCaptureFrameHeight;
int encoderOutputFrameRate;
int encodedFrameWidth;
int encodedFrameHeight;
int rendererOutputFrameRate;
int targetBitrate;
int targetFrameRate;
agora_rtc__QUALITY_ADAPT_INDICATION__C qualityAdaptIndication;
int encodedBitrate;
int encodedFrameCount;
agora_rtc__VIDEO_CODEC_TYPE__C codecType;
unsigned short txPacketLossRate;
agora_rtc__CAPTURE_BRIGHTNESS_LEVEL_TYPE__C captureBrightnessLevel;
bool dualStreamEnabled;
int hwEncoderAccelerating;
} agora_rtc__LocalVideoStats__C;


typedef struct agora_rtc__RemoteAudioStats__C
{
  agora_rtc__uid_t__C uid;
int quality;
int networkTransportDelay;
int jitterBufferDelay;
int audioLossRate;
int numChannels;
int receivedSampleRate;
int receivedBitrate;
int totalFrozenTime;
int frozenRate;
int mosValue;
uint32_t frozenRateByCustomPlcCount;
uint32_t plcCount;
int totalActiveTime;
int publishDuration;
int qoeQuality;
int qualityChangedReason;
unsigned int rxAudioBytes;
} agora_rtc__RemoteAudioStats__C;


typedef struct agora_rtc__RemoteVideoStats__C
{
  agora_rtc__uid_t__C uid;
int delay;
int e2eDelay;
int width;
int height;
int receivedBitrate;
int decoderOutputFrameRate;
int rendererOutputFrameRate;
int frameLossRate;
int packetLossRate;
agora_rtc__VIDEO_STREAM_TYPE__C rxStreamType;
int totalFrozenTime;
int frozenRate;
int avSyncTimeMs;
int totalActiveTime;
int publishDuration;
int mosValue;
unsigned int rxVideoBytes;
} agora_rtc__RemoteVideoStats__C;


typedef struct agora_rtc__Region__C
{
  agora_rtc__uid_t__C uid;
double x;
double y;
double width;
double height;
int zOrder;
double alpha;
agora_media_base__RENDER_MODE_TYPE__C renderMode;
} agora_rtc__Region__C;


typedef struct agora_rtc__VideoCompositingLayout__C
{
  int canvasWidth;
int canvasHeight;
const char* backgroundColor;
const agora_rtc__Region__C* regions;
int regionCount;
const char* appData;
int appDataLength;
} agora_rtc__VideoCompositingLayout__C;


typedef struct agora_rtc__InjectStreamConfig__C
{
  int width;
int height;
int videoGop;
int videoFramerate;
int videoBitrate;
agora_rtc__AUDIO_SAMPLE_RATE_TYPE__C audioSampleRate;
int audioBitrate;
int audioChannels;
} agora_rtc__InjectStreamConfig__C;


typedef enum agora_rtc__RTMP_STREAM_LIFE_CYCLE_TYPE__C
{
  RTMP_STREAM_LIFE_CYCLE_BIND2CHANNEL= 1,
RTMP_STREAM_LIFE_CYCLE_BIND2OWNER= 2,
} agora_rtc__RTMP_STREAM_LIFE_CYCLE_TYPE__C;


typedef struct agora_rtc__PublisherConfiguration__C
{
  int width;
int height;
int framerate;
int bitrate;
int defaultLayout;
int lifecycle;
bool owner;
int injectStreamWidth;
int injectStreamHeight;
const char* injectStreamUrl;
const char* publishUrl;
const char* rawStreamUrl;
const char* extraInfo;
} agora_rtc__PublisherConfiguration__C;


typedef enum agora_rtc__CAMERA_DIRECTION__C
{
  CAMERA_REAR= 0,
CAMERA_FRONT= 1,
} agora_rtc__CAMERA_DIRECTION__C;


typedef enum agora_rtc__CLOUD_PROXY_TYPE__C
{
  NONE_PROXY= 0,
UDP_PROXY= 1,
TCP_PROXY= 2,
} agora_rtc__CLOUD_PROXY_TYPE__C;


typedef struct agora_rtc__CameraCapturerConfiguration__C
{
  agora_rtc__CAMERA_DIRECTION__C cameraDirection;
char deviceId[512];
agora_rtc__VideoFormat__C format;
bool followEncodeDimensionRatio;
} agora_rtc__CameraCapturerConfiguration__C;


typedef struct agora_rtc__ScreenCaptureConfiguration__C
{
  bool isCaptureWindow;
uint32_t displayId;
agora_rtc__Rectangle__C screenRect;
agora__view_t__C windowId;
agora_rtc__ScreenCaptureParameters__C params;
agora_rtc__Rectangle__C regionRect;
} agora_rtc__ScreenCaptureConfiguration__C;


typedef struct agora_rtc__SIZE__C
{
  int width;
int height;
} agora_rtc__SIZE__C;


typedef struct agora_rtc__ThumbImageBuffer__C
{
  const char* buffer;
unsigned int length;
unsigned int width;
unsigned int height;
} agora_rtc__ThumbImageBuffer__C;


typedef enum agora_rtc__ScreenCaptureSourceType__C
{
  ScreenCaptureSourceType_Unknown= -1,
ScreenCaptureSourceType_Window= 0,
ScreenCaptureSourceType_Screen= 1,
ScreenCaptureSourceType_Custom= 2,
} agora_rtc__ScreenCaptureSourceType__C;


typedef struct agora_rtc__ScreenCaptureSourceInfo__C
{
  agora_rtc__ScreenCaptureSourceType__C type;
agora__view_t__C sourceId;
const char* sourceName;
agora_rtc__ThumbImageBuffer__C thumbImage;
agora_rtc__ThumbImageBuffer__C iconImage;
const char* processPath;
const char* sourceTitle;
bool primaryMonitor;
bool isOccluded;
agora_rtc__Rectangle__C position;
bool minimizeWindow;
agora__view_t__C sourceDisplayId;
} agora_rtc__ScreenCaptureSourceInfo__C;

typedef void* agora_rtc__IScreenCaptureSourceList__Handle;

unsigned int agora_rtc__IScreenCaptureSourceList__getCount(agora_rtc__IScreenCaptureSourceList__Handle handle);
agora_rtc__ScreenCaptureSourceInfo__C agora_rtc__IScreenCaptureSourceList__getSourceInfo(agora_rtc__IScreenCaptureSourceList__Handle handle,unsigned int index);
void agora_rtc__IScreenCaptureSourceList__release(agora_rtc__IScreenCaptureSourceList__Handle handle);

typedef struct agora_rtc__AdvancedAudioOptions__C
{
  int* audioProcessingChannels;
} agora_rtc__AdvancedAudioOptions__C;


typedef struct agora_rtc__ImageTrackOptions__C
{
  const char* imageUrl;
int fps;
agora_rtc__VIDEO_MIRROR_MODE_TYPE__C mirrorMode;
} agora_rtc__ImageTrackOptions__C;


typedef struct agora_rtc__ChannelMediaOptions__C
{
  bool* publishCameraTrack;
bool* publishSecondaryCameraTrack;
bool* publishThirdCameraTrack;
bool* publishFourthCameraTrack;
bool* publishMicrophoneTrack;
bool* publishScreenCaptureVideo;
bool* publishScreenCaptureAudio;
bool* publishScreenTrack;
bool* publishSecondaryScreenTrack;
bool* publishThirdScreenTrack;
bool* publishFourthScreenTrack;
bool* publishCustomAudioTrack;
int* publishCustomAudioTrackId;
bool* publishCustomVideoTrack;
bool* publishEncodedVideoTrack;
bool* publishMediaPlayerAudioTrack;
bool* publishMediaPlayerVideoTrack;
bool* publishTranscodedVideoTrack;
bool* autoSubscribeAudio;
bool* autoSubscribeVideo;
bool* enableAudioRecordingOrPlayout;
int* publishMediaPlayerId;
agora_rtc__CLIENT_ROLE_TYPE__C clientRoleType;
agora_rtc__AUDIENCE_LATENCY_LEVEL_TYPE__C audienceLatencyLevel;
agora_rtc__VIDEO_STREAM_TYPE__C defaultVideoStreamType;
agora__CHANNEL_PROFILE_TYPE__C channelProfile;
int* audioDelayMs;
int* mediaPlayerAudioDelayMs;
const char * token;
bool* enableBuiltInMediaEncryption;
bool* publishRhythmPlayerTrack;
bool* isInteractiveAudience;
agora_rtc__video_track_id_t__C customVideoTrackId;
bool* isAudioFilterable;
} agora_rtc__ChannelMediaOptions__C;


typedef enum agora_rtc__PROXY_TYPE__C
{
  NONE_PROXY_TYPE= 0,
UDP_PROXY_TYPE= 1,
TCP_PROXY_TYPE= 2,
LOCAL_PROXY_TYPE= 3,
TCP_PROXY_AUTO_FALLBACK_TYPE= 4,
HTTP_PROXY_TYPE= 5,
HTTPS_PROXY_TYPE= 6,
} agora_rtc__PROXY_TYPE__C;


typedef enum agora_rtc__FeatureType__C
{
  VIDEO_VIRTUAL_BACKGROUND= 1,
VIDEO_BEAUTY_EFFECT= 2,
} agora_rtc__FeatureType__C;


typedef struct agora_rtc__LeaveChannelOptions__C
{
  bool stopAudioMixing;
bool stopAllEffect;
bool stopMicrophoneRecording;
} agora_rtc__LeaveChannelOptions__C;

typedef void* agora_rtc__IRtcEngineEventHandler__Handle;

const char* agora_rtc__IRtcEngineEventHandler__eventHandlerType(agora_rtc__IRtcEngineEventHandler__Handle handle);
void agora_rtc__IRtcEngineEventHandler__onJoinChannelSuccess(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* channel,agora_rtc__uid_t__C uid,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onRejoinChannelSuccess(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* channel,agora_rtc__uid_t__C uid,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onProxyConnected(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* channel,agora_rtc__uid_t__C uid,agora_rtc__PROXY_TYPE__C proxyType,const char* localProxyIp,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onError(agora_rtc__IRtcEngineEventHandler__Handle handle,int err,const char* msg);
void agora_rtc__IRtcEngineEventHandler__onAudioQuality(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,int quality,unsigned short delay,unsigned short lost);
void agora_rtc__IRtcEngineEventHandler__onLastmileProbeResult(agora_rtc__IRtcEngineEventHandler__Handle handle,const agora_rtc__LastmileProbeResult__C& result);
void agora_rtc__IRtcEngineEventHandler__onAudioVolumeIndication(agora_rtc__IRtcEngineEventHandler__Handle handle,const agora_rtc__AudioVolumeInfo__C* speakers,unsigned int speakerNumber,int totalVolume);
void agora_rtc__IRtcEngineEventHandler__onLeaveChannel(agora_rtc__IRtcEngineEventHandler__Handle handle,const agora_rtc__RtcStats__C& stats);
void agora_rtc__IRtcEngineEventHandler__onRtcStats(agora_rtc__IRtcEngineEventHandler__Handle handle,const agora_rtc__RtcStats__C& stats);
void agora_rtc__IRtcEngineEventHandler__onAudioDeviceStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* deviceId,int deviceType,int deviceState);
void agora_rtc__IRtcEngineEventHandler__onAudioMixingPositionChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,int64_t position);
void agora_rtc__IRtcEngineEventHandler__onAudioMixingFinished(agora_rtc__IRtcEngineEventHandler__Handle handle);
void agora_rtc__IRtcEngineEventHandler__onAudioEffectFinished(agora_rtc__IRtcEngineEventHandler__Handle handle,int soundId);
void agora_rtc__IRtcEngineEventHandler__onVideoDeviceStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* deviceId,int deviceType,int deviceState);
void agora_rtc__IRtcEngineEventHandler__onNetworkQuality(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,int txQuality,int rxQuality);
void agora_rtc__IRtcEngineEventHandler__onIntraRequestReceived(agora_rtc__IRtcEngineEventHandler__Handle handle);
void agora_rtc__IRtcEngineEventHandler__onUplinkNetworkInfoUpdated(agora_rtc__IRtcEngineEventHandler__Handle handle,const agora_rtc__UplinkNetworkInfo__C& info);
void agora_rtc__IRtcEngineEventHandler__onDownlinkNetworkInfoUpdated(agora_rtc__IRtcEngineEventHandler__Handle handle,const agora_rtc__DownlinkNetworkInfo__C& info);
void agora_rtc__IRtcEngineEventHandler__onLastmileQuality(agora_rtc__IRtcEngineEventHandler__Handle handle,int quality);
void agora_rtc__IRtcEngineEventHandler__onFirstLocalVideoFrame(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C source,int width,int height,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onFirstLocalVideoFramePublished(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C source,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onFirstRemoteVideoDecoded(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,int width,int height,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onVideoSizeChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C sourceType,agora_rtc__uid_t__C uid,int width,int height,int rotation);
void agora_rtc__IRtcEngineEventHandler__onLocalVideoStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C source,agora_rtc__LOCAL_VIDEO_STREAM_STATE__C state,agora_rtc__LOCAL_VIDEO_STREAM_ERROR__C error);
void agora_rtc__IRtcEngineEventHandler__onRemoteVideoStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,agora_rtc__REMOTE_VIDEO_STATE__C state,agora_rtc__REMOTE_VIDEO_STATE_REASON__C reason,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onFirstRemoteVideoFrame(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C userId,int width,int height,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onUserJoined(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onUserOffline(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,agora_rtc__USER_OFFLINE_REASON_TYPE__C reason);
void agora_rtc__IRtcEngineEventHandler__onUserMuteAudio(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,bool muted);
void agora_rtc__IRtcEngineEventHandler__onUserMuteVideo(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C userId,bool muted);
void agora_rtc__IRtcEngineEventHandler__onUserEnableVideo(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,bool enabled);
void agora_rtc__IRtcEngineEventHandler__onUserStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,uint32_t state);
void agora_rtc__IRtcEngineEventHandler__onUserEnableLocalVideo(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,bool enabled);
void agora_rtc__IRtcEngineEventHandler__onLocalAudioStats(agora_rtc__IRtcEngineEventHandler__Handle handle,const agora_rtc__LocalAudioStats__C& stats);
void agora_rtc__IRtcEngineEventHandler__onRemoteAudioStats(agora_rtc__IRtcEngineEventHandler__Handle handle,const agora_rtc__RemoteAudioStats__C& stats);
void agora_rtc__IRtcEngineEventHandler__onLocalVideoStats(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C source,const agora_rtc__LocalVideoStats__C& stats);
void agora_rtc__IRtcEngineEventHandler__onRemoteVideoStats(agora_rtc__IRtcEngineEventHandler__Handle handle,const agora_rtc__RemoteVideoStats__C& stats);
void agora_rtc__IRtcEngineEventHandler__onCameraReady(agora_rtc__IRtcEngineEventHandler__Handle handle);
void agora_rtc__IRtcEngineEventHandler__onCameraFocusAreaChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,int x,int y,int width,int height);
void agora_rtc__IRtcEngineEventHandler__onCameraExposureAreaChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,int x,int y,int width,int height);
void agora_rtc__IRtcEngineEventHandler__onFacePositionChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,int imageWidth,int imageHeight,const agora_rtc__Rectangle__C* vecRectangle,const int* vecDistance,int numFaces);
void agora_rtc__IRtcEngineEventHandler__onVideoStopped(agora_rtc__IRtcEngineEventHandler__Handle handle);
void agora_rtc__IRtcEngineEventHandler__onAudioMixingStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__AUDIO_MIXING_STATE_TYPE__C state,agora_rtc__AUDIO_MIXING_REASON_TYPE__C reason);
void agora_rtc__IRtcEngineEventHandler__onRhythmPlayerStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__RHYTHM_PLAYER_STATE_TYPE__C state,agora_rtc__RHYTHM_PLAYER_ERROR_TYPE__C errorCode);
void agora_rtc__IRtcEngineEventHandler__onConnectionLost(agora_rtc__IRtcEngineEventHandler__Handle handle);
void agora_rtc__IRtcEngineEventHandler__onConnectionInterrupted(agora_rtc__IRtcEngineEventHandler__Handle handle);
void agora_rtc__IRtcEngineEventHandler__onConnectionBanned(agora_rtc__IRtcEngineEventHandler__Handle handle);
void agora_rtc__IRtcEngineEventHandler__onStreamMessage(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C userId,int streamId,const char* data,size_t length,uint64_t sentTs);
void agora_rtc__IRtcEngineEventHandler__onStreamMessageError(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C userId,int streamId,int code,int missed,int cached);
void agora_rtc__IRtcEngineEventHandler__onRequestToken(agora_rtc__IRtcEngineEventHandler__Handle handle);
void agora_rtc__IRtcEngineEventHandler__onTokenPrivilegeWillExpire(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* token);
void agora_rtc__IRtcEngineEventHandler__onLicenseValidationFailure(agora_rtc__IRtcEngineEventHandler__Handle handle,agora__LICENSE_ERROR_TYPE__C error);
void agora_rtc__IRtcEngineEventHandler__onFirstLocalAudioFramePublished(agora_rtc__IRtcEngineEventHandler__Handle handle,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onFirstRemoteAudioFrame(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onFirstRemoteAudioDecoded(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onLocalAudioStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__LOCAL_AUDIO_STREAM_STATE__C state,agora_rtc__LOCAL_AUDIO_STREAM_ERROR__C error);
void agora_rtc__IRtcEngineEventHandler__onRemoteAudioStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,agora_rtc__REMOTE_AUDIO_STATE__C state,agora_rtc__REMOTE_AUDIO_STATE_REASON__C reason,int elapsed);
void agora_rtc__IRtcEngineEventHandler__onActiveSpeaker(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C userId);
void agora_rtc__IRtcEngineEventHandler__onContentInspectResult(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_media__CONTENT_INSPECT_RESULT__C result);
void agora_rtc__IRtcEngineEventHandler__onSnapshotTaken(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,const char* filePath,int width,int height,int errCode);
void agora_rtc__IRtcEngineEventHandler__onClientRoleChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__CLIENT_ROLE_TYPE__C oldRole,agora_rtc__CLIENT_ROLE_TYPE__C newRole,const agora_rtc__ClientRoleOptions__C& newRoleOptions);
void agora_rtc__IRtcEngineEventHandler__onClientRoleChangeFailed(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__CLIENT_ROLE_CHANGE_FAILED_REASON__C reason,agora_rtc__CLIENT_ROLE_TYPE__C currentRole);
void agora_rtc__IRtcEngineEventHandler__onAudioDeviceVolumeChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__MEDIA_DEVICE_TYPE__C deviceType,int volume,bool muted);
void agora_rtc__IRtcEngineEventHandler__onRtmpStreamingStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* url,agora_rtc__RTMP_STREAM_PUBLISH_STATE__C state,agora_rtc__RTMP_STREAM_PUBLISH_ERROR_TYPE__C errCode);
void agora_rtc__IRtcEngineEventHandler__onRtmpStreamingEvent(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* url,agora_rtc__RTMP_STREAMING_EVENT__C eventCode);
void agora_rtc__IRtcEngineEventHandler__onTranscodingUpdated(agora_rtc__IRtcEngineEventHandler__Handle handle);
void agora_rtc__IRtcEngineEventHandler__onAudioRoutingChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,int routing);
void agora_rtc__IRtcEngineEventHandler__onChannelMediaRelayStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,int state,int code);
void agora_rtc__IRtcEngineEventHandler__onChannelMediaRelayEvent(agora_rtc__IRtcEngineEventHandler__Handle handle,int code);
void agora_rtc__IRtcEngineEventHandler__onLocalPublishFallbackToAudioOnly(agora_rtc__IRtcEngineEventHandler__Handle handle,bool isFallbackOrRecover);
void agora_rtc__IRtcEngineEventHandler__onRemoteSubscribeFallbackToAudioOnly(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,bool isFallbackOrRecover);
void agora_rtc__IRtcEngineEventHandler__onRemoteAudioTransportStats(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,unsigned short delay,unsigned short lost,unsigned short rxKBitRate);
void agora_rtc__IRtcEngineEventHandler__onRemoteVideoTransportStats(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,unsigned short delay,unsigned short lost,unsigned short rxKBitRate);
void agora_rtc__IRtcEngineEventHandler__onConnectionStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__CONNECTION_STATE_TYPE__C state,agora_rtc__CONNECTION_CHANGED_REASON_TYPE__C reason);
void agora_rtc__IRtcEngineEventHandler__onWlAccMessage(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__WLACC_MESSAGE_REASON__C reason,agora_rtc__WLACC_SUGGEST_ACTION__C action,const char* wlAccMsg);
void agora_rtc__IRtcEngineEventHandler__onWlAccStats(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__WlAccStats__C currentStats,agora_rtc__WlAccStats__C averageStats);
void agora_rtc__IRtcEngineEventHandler__onNetworkTypeChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__NETWORK_TYPE__C type);
void agora_rtc__IRtcEngineEventHandler__onEncryptionError(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__ENCRYPTION_ERROR_TYPE__C errorType);
void agora_rtc__IRtcEngineEventHandler__onPermissionError(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__PERMISSION_TYPE__C permissionType);
void agora_rtc__IRtcEngineEventHandler__onLocalUserRegistered(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,const char* userAccount);
void agora_rtc__IRtcEngineEventHandler__onUserInfoUpdated(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,const agora_rtc__UserInfo__C& info);
void agora_rtc__IRtcEngineEventHandler__onUploadLogResult(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* requestId,bool success,agora_rtc__UPLOAD_ERROR_REASON__C reason);
void agora_rtc__IRtcEngineEventHandler__onAudioSubscribeStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* channel,agora_rtc__uid_t__C uid,agora_rtc__STREAM_SUBSCRIBE_STATE__C oldState,agora_rtc__STREAM_SUBSCRIBE_STATE__C newState,int elapseSinceLastState);
void agora_rtc__IRtcEngineEventHandler__onVideoSubscribeStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* channel,agora_rtc__uid_t__C uid,agora_rtc__STREAM_SUBSCRIBE_STATE__C oldState,agora_rtc__STREAM_SUBSCRIBE_STATE__C newState,int elapseSinceLastState);
void agora_rtc__IRtcEngineEventHandler__onAudioPublishStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* channel,agora_rtc__STREAM_PUBLISH_STATE__C oldState,agora_rtc__STREAM_PUBLISH_STATE__C newState,int elapseSinceLastState);
void agora_rtc__IRtcEngineEventHandler__onVideoPublishStateChanged(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C source,const char* channel,agora_rtc__STREAM_PUBLISH_STATE__C oldState,agora_rtc__STREAM_PUBLISH_STATE__C newState,int elapseSinceLastState);
void agora_rtc__IRtcEngineEventHandler__onExtensionEvent(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* provider,const char* extension,const char* key,const char* value);
void agora_rtc__IRtcEngineEventHandler__onExtensionStarted(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* provider,const char* extension);
void agora_rtc__IRtcEngineEventHandler__onExtensionStopped(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* provider,const char* extension);
void agora_rtc__IRtcEngineEventHandler__onExtensionError(agora_rtc__IRtcEngineEventHandler__Handle handle,const char* provider,const char* extension,int error,const char* message);
void agora_rtc__IRtcEngineEventHandler__onUserAccountUpdated(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,const char* userAccount);
void agora_rtc__IRtcEngineEventHandler__onLocalVideoTranscoderError(agora_rtc__IRtcEngineEventHandler__Handle handle,const agora_rtc__TranscodingVideoStream__C& stream,agora_rtc__VIDEO_TRANSCODER_ERROR__C error);
void agora_rtc__IRtcEngineEventHandler__onVideoRenderingTracingResult(agora_rtc__IRtcEngineEventHandler__Handle handle,agora_rtc__uid_t__C uid,agora_rtc__MEDIA_TRACE_EVENT__C currentEvent,agora_rtc__VideoRenderingTracingInfo__C tracingInfo);
typedef void* agora_rtc__IVideoDeviceCollection__Handle;

int agora_rtc__IVideoDeviceCollection__getCount(agora_rtc__IVideoDeviceCollection__Handle handle);
int agora_rtc__IVideoDeviceCollection__setDevice(agora_rtc__IVideoDeviceCollection__Handle handle,const char deviceIdUTF8[512]);
int agora_rtc__IVideoDeviceCollection__getDevice(agora_rtc__IVideoDeviceCollection__Handle handle,int index,char deviceNameUTF8[512],char deviceIdUTF8[512]);
void agora_rtc__IVideoDeviceCollection__release(agora_rtc__IVideoDeviceCollection__Handle handle);
typedef void* agora_rtc__IVideoDeviceManager__Handle;

agora_rtc__IVideoDeviceCollection__Handle* agora_rtc__IVideoDeviceManager__enumerateVideoDevices(agora_rtc__IVideoDeviceManager__Handle handle);
int agora_rtc__IVideoDeviceManager__setDevice(agora_rtc__IVideoDeviceManager__Handle handle,const char deviceIdUTF8[512]);
int agora_rtc__IVideoDeviceManager__getDevice(agora_rtc__IVideoDeviceManager__Handle handle,char deviceIdUTF8[512]);
int agora_rtc__IVideoDeviceManager__numberOfCapabilities(agora_rtc__IVideoDeviceManager__Handle handle,const char* deviceIdUTF8);
int agora_rtc__IVideoDeviceManager__getCapability(agora_rtc__IVideoDeviceManager__Handle handle,const char* deviceIdUTF8,const uint32_t deviceCapabilityNumber,agora_rtc__VideoFormat__C& capability);
int agora_rtc__IVideoDeviceManager__startDeviceTest(agora_rtc__IVideoDeviceManager__Handle handle,agora__view_t__C hwnd);
int agora_rtc__IVideoDeviceManager__stopDeviceTest(agora_rtc__IVideoDeviceManager__Handle handle);
void agora_rtc__IVideoDeviceManager__release(agora_rtc__IVideoDeviceManager__Handle handle);

typedef struct agora_rtc__RtcEngineContext__C
{
  agora_rtc__IRtcEngineEventHandler__Handle* eventHandler;
const char* appId;
void* context;
agora__CHANNEL_PROFILE_TYPE__C channelProfile;
const char* license;
agora_rtc__AUDIO_SCENARIO_TYPE__C audioScenario;
unsigned int areaCode;
agora_commons__LogConfig__C logConfig;
agora_rtc__THREAD_PRIORITY_TYPE__C threadPriority;
bool useExternalEglContext;
bool domainLimit;
bool autoRegisterAgoraExtensions;
} agora_rtc__RtcEngineContext__C;


typedef enum agora_rtc__METADATA_TYPE__C
{
  UNKNOWN_METADATA= -1,
VIDEO_METADATA= 0,
} agora_rtc__METADATA_TYPE__C;


typedef enum agora_rtc__MAX_METADATA_SIZE_TYPE__C
{
  INVALID_METADATA_SIZE_IN_BYTE= -1,
DEFAULT_METADATA_SIZE_IN_BYTE= 512,
MAX_METADATA_SIZE_IN_BYTE= 1024,
} agora_rtc__MAX_METADATA_SIZE_TYPE__C;


typedef struct agora_rtc__Metadata__C
{
  unsigned int uid;
unsigned int size;
unsigned char* buffer;
long long timeStampMs;
} agora_rtc__Metadata__C;

typedef void* agora_rtc__IMetadataObserver__Handle;

int agora_rtc__IMetadataObserver__getMaxMetadataSize(agora_rtc__IMetadataObserver__Handle handle);
bool agora_rtc__IMetadataObserver__onReadyToSendMetadata(agora_rtc__IMetadataObserver__Handle handle,agora_rtc__Metadata__C& metadata,agora_rtc__VIDEO_SOURCE_TYPE__C source_type);
void agora_rtc__IMetadataObserver__onMetadataReceived(agora_rtc__IMetadataObserver__Handle handle,const agora_rtc__Metadata__C& metadata);

typedef enum agora_rtc__DIRECT_CDN_STREAMING_ERROR__C
{
  DIRECT_CDN_STREAMING_ERROR_OK= 0,
DIRECT_CDN_STREAMING_ERROR_FAILED= 1,
DIRECT_CDN_STREAMING_ERROR_AUDIO_PUBLICATION= 2,
DIRECT_CDN_STREAMING_ERROR_VIDEO_PUBLICATION= 3,
DIRECT_CDN_STREAMING_ERROR_NET_CONNECT= 4,
DIRECT_CDN_STREAMING_ERROR_BAD_NAME= 5,
} agora_rtc__DIRECT_CDN_STREAMING_ERROR__C;


typedef enum agora_rtc__DIRECT_CDN_STREAMING_STATE__C
{
  DIRECT_CDN_STREAMING_STATE_IDLE= 0,
DIRECT_CDN_STREAMING_STATE_RUNNING= 1,
DIRECT_CDN_STREAMING_STATE_STOPPED= 2,
DIRECT_CDN_STREAMING_STATE_FAILED= 3,
DIRECT_CDN_STREAMING_STATE_RECOVERING= 4,
} agora_rtc__DIRECT_CDN_STREAMING_STATE__C;


typedef struct agora_rtc__DirectCdnStreamingStats__C
{
  int videoWidth;
int videoHeight;
int fps;
int videoBitrate;
int audioBitrate;
} agora_rtc__DirectCdnStreamingStats__C;

typedef void* agora_rtc__IDirectCdnStreamingEventHandler__Handle;

void agora_rtc__IDirectCdnStreamingEventHandler__onDirectCdnStreamingStateChanged(agora_rtc__IDirectCdnStreamingEventHandler__Handle handle,agora_rtc__DIRECT_CDN_STREAMING_STATE__C state,agora_rtc__DIRECT_CDN_STREAMING_ERROR__C error,const char* message);
void agora_rtc__IDirectCdnStreamingEventHandler__onDirectCdnStreamingStats(agora_rtc__IDirectCdnStreamingEventHandler__Handle handle,const agora_rtc__DirectCdnStreamingStats__C& stats);

typedef struct agora_rtc__DirectCdnStreamingMediaOptions__C
{
  bool* publishCameraTrack;
bool* publishMicrophoneTrack;
bool* publishCustomAudioTrack;
bool* publishCustomVideoTrack;
bool* publishMediaPlayerAudioTrack;
int* publishMediaPlayerId;
agora_rtc__video_track_id_t__C customVideoTrackId;
} agora_rtc__DirectCdnStreamingMediaOptions__C;


typedef struct agora_rtc__ExtensionInfo__C
{
  agora_media__MEDIA_SOURCE_TYPE__C mediaSourceType;
agora_rtc__uid_t__C remoteUid;
const char* channelId;
agora_rtc__uid_t__C localUid;
} agora_rtc__ExtensionInfo__C;

typedef void* agora_rtc__IRtcEngine__Handle;

void agora_rtc__IRtcEngine__release(agora_rtc__IRtcEngine__Handle handle,bool sync);
int agora_rtc__IRtcEngine__initialize(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__RtcEngineContext__C& context);
int agora_rtc__IRtcEngine__queryInterface(agora_rtc__IRtcEngine__Handle handle,agora_rtc__INTERFACE_ID_TYPE__C iid,void* inter);
const char* agora_rtc__IRtcEngine__getVersion(agora_rtc__IRtcEngine__Handle handle,int* build);
const char* agora_rtc__IRtcEngine__getErrorDescription(agora_rtc__IRtcEngine__Handle handle,int code);
int agora_rtc__IRtcEngine__queryCodecCapability(agora_rtc__IRtcEngine__Handle handle,agora_rtc__CodecCapInfo__C* codecInfo,int& size);
int agora_rtc__IRtcEngine__preloadChannel(agora_rtc__IRtcEngine__Handle handle,const char* token,const char* channelId,agora_rtc__uid_t__C uid);
int agora_rtc__IRtcEngine__preloadChannel(agora_rtc__IRtcEngine__Handle handle,const char* token,const char* channelId,const char* userAccount);
int agora_rtc__IRtcEngine__updatePreloadChannelToken(agora_rtc__IRtcEngine__Handle handle,const char* token);
int agora_rtc__IRtcEngine__joinChannel(agora_rtc__IRtcEngine__Handle handle,const char* token,const char* channelId,const char* info,agora_rtc__uid_t__C uid);
int agora_rtc__IRtcEngine__joinChannel(agora_rtc__IRtcEngine__Handle handle,const char* token,const char* channelId,agora_rtc__uid_t__C uid,const agora_rtc__ChannelMediaOptions__C& options);
int agora_rtc__IRtcEngine__updateChannelMediaOptions(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__ChannelMediaOptions__C& options);
int agora_rtc__IRtcEngine__leaveChannel(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__leaveChannel(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__LeaveChannelOptions__C& options);
int agora_rtc__IRtcEngine__renewToken(agora_rtc__IRtcEngine__Handle handle,const char* token);
int agora_rtc__IRtcEngine__setChannelProfile(agora_rtc__IRtcEngine__Handle handle,agora__CHANNEL_PROFILE_TYPE__C profile);
int agora_rtc__IRtcEngine__setClientRole(agora_rtc__IRtcEngine__Handle handle,agora_rtc__CLIENT_ROLE_TYPE__C role);
int agora_rtc__IRtcEngine__setClientRole(agora_rtc__IRtcEngine__Handle handle,agora_rtc__CLIENT_ROLE_TYPE__C role,const agora_rtc__ClientRoleOptions__C& options);
int agora_rtc__IRtcEngine__startEchoTest(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__startEchoTest(agora_rtc__IRtcEngine__Handle handle,int intervalInSeconds);
int agora_rtc__IRtcEngine__startEchoTest(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__EchoTestConfiguration__C& config);
int agora_rtc__IRtcEngine__stopEchoTest(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__enableMultiCamera(agora_rtc__IRtcEngine__Handle handle,bool enabled,const agora_rtc__CameraCapturerConfiguration__C& config);
int agora_rtc__IRtcEngine__enableVideo(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__disableVideo(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__startPreview(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__startPreview(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C sourceType);
int agora_rtc__IRtcEngine__stopPreview(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__stopPreview(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C sourceType);
int agora_rtc__IRtcEngine__startLastmileProbeTest(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__LastmileProbeConfig__C& config);
int agora_rtc__IRtcEngine__stopLastmileProbeTest(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setVideoEncoderConfiguration(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__VideoEncoderConfiguration__C& config);
int agora_rtc__IRtcEngine__setBeautyEffectOptions(agora_rtc__IRtcEngine__Handle handle,bool enabled,const agora_rtc__BeautyOptions__C& options,agora_media__MEDIA_SOURCE_TYPE__C type);
int agora_rtc__IRtcEngine__setLowlightEnhanceOptions(agora_rtc__IRtcEngine__Handle handle,bool enabled,const agora_rtc__LowlightEnhanceOptions__C& options,agora_media__MEDIA_SOURCE_TYPE__C type);
int agora_rtc__IRtcEngine__setVideoDenoiserOptions(agora_rtc__IRtcEngine__Handle handle,bool enabled,const agora_rtc__VideoDenoiserOptions__C& options,agora_media__MEDIA_SOURCE_TYPE__C type);
int agora_rtc__IRtcEngine__setColorEnhanceOptions(agora_rtc__IRtcEngine__Handle handle,bool enabled,const agora_rtc__ColorEnhanceOptions__C& options,agora_media__MEDIA_SOURCE_TYPE__C type);
int agora_rtc__IRtcEngine__enableVirtualBackground(agora_rtc__IRtcEngine__Handle handle,bool enabled,agora_rtc__VirtualBackgroundSource__C backgroundSource,agora_rtc__SegmentationProperty__C segproperty,agora_media__MEDIA_SOURCE_TYPE__C type);
int agora_rtc__IRtcEngine__setupRemoteVideo(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__VideoCanvas__C& canvas);
int agora_rtc__IRtcEngine__setupLocalVideo(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__VideoCanvas__C& canvas);
int agora_rtc__IRtcEngine__setVideoScenario(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_APPLICATION_SCENARIO_TYPE__C scenarioType);
int agora_rtc__IRtcEngine__enableAudio(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__disableAudio(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setAudioProfile(agora_rtc__IRtcEngine__Handle handle,agora_rtc__AUDIO_PROFILE_TYPE__C profile,agora_rtc__AUDIO_SCENARIO_TYPE__C scenario);
int agora_rtc__IRtcEngine__setAudioProfile(agora_rtc__IRtcEngine__Handle handle,agora_rtc__AUDIO_PROFILE_TYPE__C profile);
int agora_rtc__IRtcEngine__setAudioScenario(agora_rtc__IRtcEngine__Handle handle,agora_rtc__AUDIO_SCENARIO_TYPE__C scenario);
int agora_rtc__IRtcEngine__enableLocalAudio(agora_rtc__IRtcEngine__Handle handle,bool enabled);
int agora_rtc__IRtcEngine__muteLocalAudioStream(agora_rtc__IRtcEngine__Handle handle,bool mute);
int agora_rtc__IRtcEngine__muteAllRemoteAudioStreams(agora_rtc__IRtcEngine__Handle handle,bool mute);
int agora_rtc__IRtcEngine__setDefaultMuteAllRemoteAudioStreams(agora_rtc__IRtcEngine__Handle handle,bool mute);
int agora_rtc__IRtcEngine__muteRemoteAudioStream(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C uid,bool mute);
int agora_rtc__IRtcEngine__muteLocalVideoStream(agora_rtc__IRtcEngine__Handle handle,bool mute);
int agora_rtc__IRtcEngine__enableLocalVideo(agora_rtc__IRtcEngine__Handle handle,bool enabled);
int agora_rtc__IRtcEngine__muteAllRemoteVideoStreams(agora_rtc__IRtcEngine__Handle handle,bool mute);
int agora_rtc__IRtcEngine__setDefaultMuteAllRemoteVideoStreams(agora_rtc__IRtcEngine__Handle handle,bool mute);
int agora_rtc__IRtcEngine__muteRemoteVideoStream(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C uid,bool mute);
int agora_rtc__IRtcEngine__setRemoteVideoStreamType(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C uid,agora_rtc__VIDEO_STREAM_TYPE__C streamType);
int agora_rtc__IRtcEngine__setRemoteVideoSubscriptionOptions(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C uid,const agora_rtc__VideoSubscriptionOptions__C& options);
int agora_rtc__IRtcEngine__setRemoteDefaultVideoStreamType(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_STREAM_TYPE__C streamType);
int agora_rtc__IRtcEngine__setSubscribeAudioBlocklist(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C* uidList,int uidNumber);
int agora_rtc__IRtcEngine__setSubscribeAudioAllowlist(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C* uidList,int uidNumber);
int agora_rtc__IRtcEngine__setSubscribeVideoBlocklist(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C* uidList,int uidNumber);
int agora_rtc__IRtcEngine__setSubscribeVideoAllowlist(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C* uidList,int uidNumber);
int agora_rtc__IRtcEngine__enableAudioVolumeIndication(agora_rtc__IRtcEngine__Handle handle,int interval,int smooth,bool reportVad);
int agora_rtc__IRtcEngine__startAudioRecording(agora_rtc__IRtcEngine__Handle handle,const char* filePath,agora_rtc__AUDIO_RECORDING_QUALITY_TYPE__C quality);
int agora_rtc__IRtcEngine__startAudioRecording(agora_rtc__IRtcEngine__Handle handle,const char* filePath,int sampleRate,agora_rtc__AUDIO_RECORDING_QUALITY_TYPE__C quality);
int agora_rtc__IRtcEngine__startAudioRecording(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__AudioRecordingConfiguration__C& config);
int agora_rtc__IRtcEngine__registerAudioEncodedFrameObserver(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__AudioEncodedFrameObserverConfig__C& config,agora_rtc__IAudioEncodedFrameObserver__Handle* observer);
int agora_rtc__IRtcEngine__stopAudioRecording(agora_rtc__IRtcEngine__Handle handle);
agora_rtc__IMediaPlayer__Handle agora_rtc__IRtcEngine__createMediaPlayer(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__destroyMediaPlayer(agora_rtc__IRtcEngine__Handle handle,agora_rtc__IMediaPlayer__Handle media_player);
agora_rtc__IMediaRecorder__Handle agora_rtc__IRtcEngine__createMediaRecorder(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__RecorderStreamInfo__C& info);
int agora_rtc__IRtcEngine__destroyMediaRecorder(agora_rtc__IRtcEngine__Handle handle,agora_rtc__IMediaRecorder__Handle mediaRecorder);
int agora_rtc__IRtcEngine__startAudioMixing(agora_rtc__IRtcEngine__Handle handle,const char* filePath,bool loopback,int cycle);
int agora_rtc__IRtcEngine__startAudioMixing(agora_rtc__IRtcEngine__Handle handle,const char* filePath,bool loopback,int cycle,int startPos);
int agora_rtc__IRtcEngine__stopAudioMixing(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__pauseAudioMixing(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__resumeAudioMixing(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__selectAudioTrack(agora_rtc__IRtcEngine__Handle handle,int index);
int agora_rtc__IRtcEngine__getAudioTrackCount(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__adjustAudioMixingVolume(agora_rtc__IRtcEngine__Handle handle,int volume);
int agora_rtc__IRtcEngine__adjustAudioMixingPublishVolume(agora_rtc__IRtcEngine__Handle handle,int volume);
int agora_rtc__IRtcEngine__getAudioMixingPublishVolume(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__adjustAudioMixingPlayoutVolume(agora_rtc__IRtcEngine__Handle handle,int volume);
int agora_rtc__IRtcEngine__getAudioMixingPlayoutVolume(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__getAudioMixingDuration(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__getAudioMixingCurrentPosition(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setAudioMixingPosition(agora_rtc__IRtcEngine__Handle handle,int pos);
int agora_rtc__IRtcEngine__setAudioMixingDualMonoMode(agora_rtc__IRtcEngine__Handle handle,agora_media__AUDIO_MIXING_DUAL_MONO_MODE__C mode);
int agora_rtc__IRtcEngine__setAudioMixingPitch(agora_rtc__IRtcEngine__Handle handle,int pitch);
int agora_rtc__IRtcEngine__getEffectsVolume(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setEffectsVolume(agora_rtc__IRtcEngine__Handle handle,int volume);
int agora_rtc__IRtcEngine__preloadEffect(agora_rtc__IRtcEngine__Handle handle,int soundId,const char* filePath,int startPos);
int agora_rtc__IRtcEngine__playEffect(agora_rtc__IRtcEngine__Handle handle,int soundId,const char* filePath,int loopCount,double pitch,double pan,int gain,bool publish,int startPos);
int agora_rtc__IRtcEngine__playAllEffects(agora_rtc__IRtcEngine__Handle handle,int loopCount,double pitch,double pan,int gain,bool publish);
int agora_rtc__IRtcEngine__getVolumeOfEffect(agora_rtc__IRtcEngine__Handle handle,int soundId);
int agora_rtc__IRtcEngine__setVolumeOfEffect(agora_rtc__IRtcEngine__Handle handle,int soundId,int volume);
int agora_rtc__IRtcEngine__pauseEffect(agora_rtc__IRtcEngine__Handle handle,int soundId);
int agora_rtc__IRtcEngine__pauseAllEffects(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__resumeEffect(agora_rtc__IRtcEngine__Handle handle,int soundId);
int agora_rtc__IRtcEngine__resumeAllEffects(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__stopEffect(agora_rtc__IRtcEngine__Handle handle,int soundId);
int agora_rtc__IRtcEngine__stopAllEffects(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__unloadEffect(agora_rtc__IRtcEngine__Handle handle,int soundId);
int agora_rtc__IRtcEngine__unloadAllEffects(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__getEffectDuration(agora_rtc__IRtcEngine__Handle handle,const char* filePath);
int agora_rtc__IRtcEngine__setEffectPosition(agora_rtc__IRtcEngine__Handle handle,int soundId,int pos);
int agora_rtc__IRtcEngine__getEffectCurrentPosition(agora_rtc__IRtcEngine__Handle handle,int soundId);
int agora_rtc__IRtcEngine__enableSoundPositionIndication(agora_rtc__IRtcEngine__Handle handle,bool enabled);
int agora_rtc__IRtcEngine__setRemoteVoicePosition(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C uid,double pan,double gain);
int agora_rtc__IRtcEngine__enableSpatialAudio(agora_rtc__IRtcEngine__Handle handle,bool enabled);
int agora_rtc__IRtcEngine__setRemoteUserSpatialAudioParams(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C uid,const agora__SpatialAudioParams__C& params);
int agora_rtc__IRtcEngine__setVoiceBeautifierPreset(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VOICE_BEAUTIFIER_PRESET__C preset);
int agora_rtc__IRtcEngine__setAudioEffectPreset(agora_rtc__IRtcEngine__Handle handle,agora_rtc__AUDIO_EFFECT_PRESET__C preset);
int agora_rtc__IRtcEngine__setVoiceConversionPreset(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VOICE_CONVERSION_PRESET__C preset);
int agora_rtc__IRtcEngine__setAudioEffectParameters(agora_rtc__IRtcEngine__Handle handle,agora_rtc__AUDIO_EFFECT_PRESET__C preset,int param1,int param2);
int agora_rtc__IRtcEngine__setVoiceBeautifierParameters(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VOICE_BEAUTIFIER_PRESET__C preset,int param1,int param2);
int agora_rtc__IRtcEngine__setVoiceConversionParameters(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VOICE_CONVERSION_PRESET__C preset,int param1,int param2);
int agora_rtc__IRtcEngine__setLocalVoicePitch(agora_rtc__IRtcEngine__Handle handle,double pitch);
int agora_rtc__IRtcEngine__setLocalVoiceFormant(agora_rtc__IRtcEngine__Handle handle,double formantRatio);
int agora_rtc__IRtcEngine__setLocalVoiceEqualization(agora_rtc__IRtcEngine__Handle handle,agora_rtc__AUDIO_EQUALIZATION_BAND_FREQUENCY__C bandFrequency,int bandGain);
int agora_rtc__IRtcEngine__setLocalVoiceReverb(agora_rtc__IRtcEngine__Handle handle,agora_rtc__AUDIO_REVERB_TYPE__C reverbKey,int value);
int agora_rtc__IRtcEngine__setHeadphoneEQPreset(agora_rtc__IRtcEngine__Handle handle,agora_rtc__HEADPHONE_EQUALIZER_PRESET__C preset);
int agora_rtc__IRtcEngine__setHeadphoneEQParameters(agora_rtc__IRtcEngine__Handle handle,int lowGain,int highGain);
int agora_rtc__IRtcEngine__setLogFile(agora_rtc__IRtcEngine__Handle handle,const char* filePath);
int agora_rtc__IRtcEngine__setLogFilter(agora_rtc__IRtcEngine__Handle handle,unsigned int filter);
int agora_rtc__IRtcEngine__setLogLevel(agora_rtc__IRtcEngine__Handle handle,agora_commons__LOG_LEVEL__C level);
int agora_rtc__IRtcEngine__setLogFileSize(agora_rtc__IRtcEngine__Handle handle,unsigned int fileSizeInKBytes);
int agora_rtc__IRtcEngine__uploadLogFile(agora_rtc__IRtcEngine__Handle handle,char * requestId);
int agora_rtc__IRtcEngine__setLocalRenderMode(agora_rtc__IRtcEngine__Handle handle,agora_media_base__RENDER_MODE_TYPE__C renderMode,agora_rtc__VIDEO_MIRROR_MODE_TYPE__C mirrorMode);
int agora_rtc__IRtcEngine__setRemoteRenderMode(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C uid,agora_media_base__RENDER_MODE_TYPE__C renderMode,agora_rtc__VIDEO_MIRROR_MODE_TYPE__C mirrorMode);
int agora_rtc__IRtcEngine__setLocalRenderMode(agora_rtc__IRtcEngine__Handle handle,agora_media_base__RENDER_MODE_TYPE__C renderMode);
int agora_rtc__IRtcEngine__setLocalVideoMirrorMode(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_MIRROR_MODE_TYPE__C mirrorMode);
int agora_rtc__IRtcEngine__enableDualStreamMode(agora_rtc__IRtcEngine__Handle handle,bool enabled);
int agora_rtc__IRtcEngine__enableDualStreamMode(agora_rtc__IRtcEngine__Handle handle,bool enabled,const agora_rtc__SimulcastStreamConfig__C& streamConfig);
int agora_rtc__IRtcEngine__setDualStreamMode(agora_rtc__IRtcEngine__Handle handle,agora_rtc__SIMULCAST_STREAM_MODE__C mode);
int agora_rtc__IRtcEngine__setDualStreamMode(agora_rtc__IRtcEngine__Handle handle,agora_rtc__SIMULCAST_STREAM_MODE__C mode,const agora_rtc__SimulcastStreamConfig__C& streamConfig);
int agora_rtc__IRtcEngine__enableCustomAudioLocalPlayback(agora_rtc__IRtcEngine__Handle handle,agora_rtc__track_id_t__C trackId,bool enabled);
int agora_rtc__IRtcEngine__setRecordingAudioFrameParameters(agora_rtc__IRtcEngine__Handle handle,int sampleRate,int channel,agora_rtc__RAW_AUDIO_FRAME_OP_MODE_TYPE__C mode,int samplesPerCall);
int agora_rtc__IRtcEngine__setPlaybackAudioFrameParameters(agora_rtc__IRtcEngine__Handle handle,int sampleRate,int channel,agora_rtc__RAW_AUDIO_FRAME_OP_MODE_TYPE__C mode,int samplesPerCall);
int agora_rtc__IRtcEngine__setMixedAudioFrameParameters(agora_rtc__IRtcEngine__Handle handle,int sampleRate,int channel,int samplesPerCall);
int agora_rtc__IRtcEngine__setEarMonitoringAudioFrameParameters(agora_rtc__IRtcEngine__Handle handle,int sampleRate,int channel,agora_rtc__RAW_AUDIO_FRAME_OP_MODE_TYPE__C mode,int samplesPerCall);
int agora_rtc__IRtcEngine__setPlaybackAudioFrameBeforeMixingParameters(agora_rtc__IRtcEngine__Handle handle,int sampleRate,int channel);
int agora_rtc__IRtcEngine__enableAudioSpectrumMonitor(agora_rtc__IRtcEngine__Handle handle,int intervalInMS);
int agora_rtc__IRtcEngine__disableAudioSpectrumMonitor(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__registerAudioSpectrumObserver(agora_rtc__IRtcEngine__Handle handle,agora_media__IAudioSpectrumObserver__Handle* observer);
int agora_rtc__IRtcEngine__unregisterAudioSpectrumObserver(agora_rtc__IRtcEngine__Handle handle,agora_media__IAudioSpectrumObserver__Handle* observer);
int agora_rtc__IRtcEngine__adjustRecordingSignalVolume(agora_rtc__IRtcEngine__Handle handle,int volume);
int agora_rtc__IRtcEngine__muteRecordingSignal(agora_rtc__IRtcEngine__Handle handle,bool mute);
int agora_rtc__IRtcEngine__adjustPlaybackSignalVolume(agora_rtc__IRtcEngine__Handle handle,int volume);
int agora_rtc__IRtcEngine__adjustUserPlaybackSignalVolume(agora_rtc__IRtcEngine__Handle handle,unsigned int uid,int volume);
int agora_rtc__IRtcEngine__setLocalPublishFallbackOption(agora_rtc__IRtcEngine__Handle handle,agora_rtc__STREAM_FALLBACK_OPTIONS__C option);
int agora_rtc__IRtcEngine__setRemoteSubscribeFallbackOption(agora_rtc__IRtcEngine__Handle handle,agora_rtc__STREAM_FALLBACK_OPTIONS__C option);
int agora_rtc__IRtcEngine__setHighPriorityUserList(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C* uidList,int uidNum,agora_rtc__STREAM_FALLBACK_OPTIONS__C option);
int agora_rtc__IRtcEngine__enableLoopbackRecording(agora_rtc__IRtcEngine__Handle handle,bool enabled,const char* deviceName);
int agora_rtc__IRtcEngine__adjustLoopbackSignalVolume(agora_rtc__IRtcEngine__Handle handle,int volume);
int agora_rtc__IRtcEngine__getLoopbackRecordingVolume(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__enableInEarMonitoring(agora_rtc__IRtcEngine__Handle handle,bool enabled,int includeAudioFilters);
int agora_rtc__IRtcEngine__setInEarMonitoringVolume(agora_rtc__IRtcEngine__Handle handle,int volume);
int agora_rtc__IRtcEngine__loadExtensionProvider(agora_rtc__IRtcEngine__Handle handle,const char* path,bool unload_after_use);
int agora_rtc__IRtcEngine__setExtensionProviderProperty(agora_rtc__IRtcEngine__Handle handle,const char* provider,const char* key,const char* value);
int agora_rtc__IRtcEngine__registerExtension(agora_rtc__IRtcEngine__Handle handle,const char* provider,const char* extension,agora_media__MEDIA_SOURCE_TYPE__C type);
int agora_rtc__IRtcEngine__enableExtension(agora_rtc__IRtcEngine__Handle handle,const char* provider,const char* extension,bool enable,agora_media__MEDIA_SOURCE_TYPE__C type);
int agora_rtc__IRtcEngine__enableExtension(agora_rtc__IRtcEngine__Handle handle,const char* provider,const char* extension,const agora_rtc__ExtensionInfo__C& extensionInfo,bool enable);
int agora_rtc__IRtcEngine__setExtensionProperty(agora_rtc__IRtcEngine__Handle handle,const char* provider,const char* extension,const char* key,const char* value,agora_media__MEDIA_SOURCE_TYPE__C type);
int agora_rtc__IRtcEngine__getExtensionProperty(agora_rtc__IRtcEngine__Handle handle,const char* provider,const char* extension,const char* key,char* value,int buf_len,agora_media__MEDIA_SOURCE_TYPE__C type);
int agora_rtc__IRtcEngine__setExtensionProperty(agora_rtc__IRtcEngine__Handle handle,const char* provider,const char* extension,const agora_rtc__ExtensionInfo__C& extensionInfo,const char* key,const char* value);
int agora_rtc__IRtcEngine__getExtensionProperty(agora_rtc__IRtcEngine__Handle handle,const char* provider,const char* extension,const agora_rtc__ExtensionInfo__C& extensionInfo,const char* key,char* value,int buf_len);
int agora_rtc__IRtcEngine__setCameraCapturerConfiguration(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__CameraCapturerConfiguration__C& config);
agora_rtc__video_track_id_t__C agora_rtc__IRtcEngine__createCustomVideoTrack(agora_rtc__IRtcEngine__Handle handle);
agora_rtc__video_track_id_t__C agora_rtc__IRtcEngine__createCustomEncodedVideoTrack(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__SenderOptions__C& sender_option);
int agora_rtc__IRtcEngine__destroyCustomVideoTrack(agora_rtc__IRtcEngine__Handle handle,agora_rtc__video_track_id_t__C video_track_id);
int agora_rtc__IRtcEngine__destroyCustomEncodedVideoTrack(agora_rtc__IRtcEngine__Handle handle,agora_rtc__video_track_id_t__C video_track_id);
int agora_rtc__IRtcEngine__switchCamera(agora_rtc__IRtcEngine__Handle handle);
bool agora_rtc__IRtcEngine__isCameraZoomSupported(agora_rtc__IRtcEngine__Handle handle);
bool agora_rtc__IRtcEngine__isCameraFaceDetectSupported(agora_rtc__IRtcEngine__Handle handle);
bool agora_rtc__IRtcEngine__isCameraTorchSupported(agora_rtc__IRtcEngine__Handle handle);
bool agora_rtc__IRtcEngine__isCameraFocusSupported(agora_rtc__IRtcEngine__Handle handle);
bool agora_rtc__IRtcEngine__isCameraAutoFocusFaceModeSupported(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setCameraZoomFactor(agora_rtc__IRtcEngine__Handle handle,float factor);
int agora_rtc__IRtcEngine__enableFaceDetection(agora_rtc__IRtcEngine__Handle handle,bool enabled);
float agora_rtc__IRtcEngine__getCameraMaxZoomFactor(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setCameraFocusPositionInPreview(agora_rtc__IRtcEngine__Handle handle,float positionX,float positionY);
int agora_rtc__IRtcEngine__setCameraTorchOn(agora_rtc__IRtcEngine__Handle handle,bool isOn);
int agora_rtc__IRtcEngine__setCameraAutoFocusFaceModeEnabled(agora_rtc__IRtcEngine__Handle handle,bool enabled);
bool agora_rtc__IRtcEngine__isCameraExposurePositionSupported(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setCameraExposurePosition(agora_rtc__IRtcEngine__Handle handle,float positionXinView,float positionYinView);
bool agora_rtc__IRtcEngine__isCameraExposureSupported(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setCameraExposureFactor(agora_rtc__IRtcEngine__Handle handle,float factor);
bool agora_rtc__IRtcEngine__isCameraAutoExposureFaceModeSupported(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setCameraAutoExposureFaceModeEnabled(agora_rtc__IRtcEngine__Handle handle,bool enabled);
int agora_rtc__IRtcEngine__setDefaultAudioRouteToSpeakerphone(agora_rtc__IRtcEngine__Handle handle,bool defaultToSpeaker);
int agora_rtc__IRtcEngine__setEnableSpeakerphone(agora_rtc__IRtcEngine__Handle handle,bool speakerOn);
bool agora_rtc__IRtcEngine__isSpeakerphoneEnabled(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setRouteInCommunicationMode(agora_rtc__IRtcEngine__Handle handle,int route);
agora_rtc__IScreenCaptureSourceList__Handle* agora_rtc__IRtcEngine__getScreenCaptureSources(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__SIZE__C& thumbSize,const agora_rtc__SIZE__C& iconSize,const bool includeScreen);
int agora_rtc__IRtcEngine__setAudioSessionOperationRestriction(agora_rtc__IRtcEngine__Handle handle,agora__AUDIO_SESSION_OPERATION_RESTRICTION__C restriction);
int agora_rtc__IRtcEngine__startScreenCaptureByDisplayId(agora_rtc__IRtcEngine__Handle handle,uint32_t displayId,const agora_rtc__Rectangle__C& regionRect,const agora_rtc__ScreenCaptureParameters__C& captureParams);
int agora_rtc__IRtcEngine__startScreenCaptureByScreenRect(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__Rectangle__C& screenRect,const agora_rtc__Rectangle__C& regionRect,const agora_rtc__ScreenCaptureParameters__C& captureParams);
int agora_rtc__IRtcEngine__getAudioDeviceInfo(agora_rtc__IRtcEngine__Handle handle,agora_rtc__DeviceInfo__C& deviceInfo);
int agora_rtc__IRtcEngine__startScreenCaptureByWindowId(agora_rtc__IRtcEngine__Handle handle,agora__view_t__C windowId,const agora_rtc__Rectangle__C& regionRect,const agora_rtc__ScreenCaptureParameters__C& captureParams);
int agora_rtc__IRtcEngine__setScreenCaptureContentHint(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_CONTENT_HINT__C contentHint);
int agora_rtc__IRtcEngine__updateScreenCaptureRegion(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__Rectangle__C& regionRect);
int agora_rtc__IRtcEngine__updateScreenCaptureParameters(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__ScreenCaptureParameters__C& captureParams);
int agora_rtc__IRtcEngine__startScreenCapture(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__ScreenCaptureParameters2__C& captureParams);
int agora_rtc__IRtcEngine__updateScreenCapture(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__ScreenCaptureParameters2__C& captureParams);
int agora_rtc__IRtcEngine__queryScreenCaptureCapability(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setScreenCaptureScenario(agora_rtc__IRtcEngine__Handle handle,agora_rtc__SCREEN_SCENARIO_TYPE__C screenScenario);
int agora_rtc__IRtcEngine__stopScreenCapture(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__getCallId(agora_rtc__IRtcEngine__Handle handle,char * callId);
int agora_rtc__IRtcEngine__rate(agora_rtc__IRtcEngine__Handle handle,const char* callId,int rating,const char* description);
int agora_rtc__IRtcEngine__complain(agora_rtc__IRtcEngine__Handle handle,const char* callId,const char* description);
int agora_rtc__IRtcEngine__startRtmpStreamWithoutTranscoding(agora_rtc__IRtcEngine__Handle handle,const char* url);
int agora_rtc__IRtcEngine__startRtmpStreamWithTranscoding(agora_rtc__IRtcEngine__Handle handle,const char* url,const agora_rtc__LiveTranscoding__C& transcoding);
int agora_rtc__IRtcEngine__updateRtmpTranscoding(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__LiveTranscoding__C& transcoding);
int agora_rtc__IRtcEngine__stopRtmpStream(agora_rtc__IRtcEngine__Handle handle,const char* url);
int agora_rtc__IRtcEngine__startLocalVideoTranscoder(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__LocalTranscoderConfiguration__C& config);
int agora_rtc__IRtcEngine__updateLocalTranscoderConfiguration(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__LocalTranscoderConfiguration__C& config);
int agora_rtc__IRtcEngine__stopLocalVideoTranscoder(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__startCameraCapture(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C sourceType,const agora_rtc__CameraCapturerConfiguration__C& config);
int agora_rtc__IRtcEngine__stopCameraCapture(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C sourceType);
int agora_rtc__IRtcEngine__setCameraDeviceOrientation(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C type,agora_rtc__VIDEO_ORIENTATION__C orientation);
int agora_rtc__IRtcEngine__setScreenCaptureOrientation(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C type,agora_rtc__VIDEO_ORIENTATION__C orientation);
int agora_rtc__IRtcEngine__startScreenCapture(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C sourceType,const agora_rtc__ScreenCaptureConfiguration__C& config);
int agora_rtc__IRtcEngine__stopScreenCapture(agora_rtc__IRtcEngine__Handle handle,agora_rtc__VIDEO_SOURCE_TYPE__C sourceType);
agora_rtc__CONNECTION_STATE_TYPE__C agora_rtc__IRtcEngine__getConnectionState(agora_rtc__IRtcEngine__Handle handle);
bool agora_rtc__IRtcEngine__registerEventHandler(agora_rtc__IRtcEngine__Handle handle,agora_rtc__IRtcEngineEventHandler__Handle* eventHandler);
bool agora_rtc__IRtcEngine__unregisterEventHandler(agora_rtc__IRtcEngine__Handle handle,agora_rtc__IRtcEngineEventHandler__Handle* eventHandler);
int agora_rtc__IRtcEngine__setRemoteUserPriority(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C uid,agora_rtc__PRIORITY_TYPE__C userPriority);
int agora_rtc__IRtcEngine__registerPacketObserver(agora_rtc__IRtcEngine__Handle handle,agora_rtc__IPacketObserver__Handle* observer);
int agora_rtc__IRtcEngine__setEncryptionMode(agora_rtc__IRtcEngine__Handle handle,const char* encryptionMode);
int agora_rtc__IRtcEngine__setEncryptionSecret(agora_rtc__IRtcEngine__Handle handle,const char* secret);
int agora_rtc__IRtcEngine__enableEncryption(agora_rtc__IRtcEngine__Handle handle,bool enabled,const agora_rtc__EncryptionConfig__C& config);
int agora_rtc__IRtcEngine__createDataStream(agora_rtc__IRtcEngine__Handle handle,int* streamId,bool reliable,bool ordered);
int agora_rtc__IRtcEngine__createDataStream(agora_rtc__IRtcEngine__Handle handle,int* streamId,agora_rtc__DataStreamConfig__C& config);
int agora_rtc__IRtcEngine__sendStreamMessage(agora_rtc__IRtcEngine__Handle handle,int streamId,const char* data,size_t length);
int agora_rtc__IRtcEngine__addVideoWatermark(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__RtcImage__C& watermark);
int agora_rtc__IRtcEngine__addVideoWatermark(agora_rtc__IRtcEngine__Handle handle,const char* watermarkUrl,const agora_rtc__WatermarkOptions__C& options);
int agora_rtc__IRtcEngine__clearVideoWatermarks(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__pauseAudio(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__resumeAudio(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__enableWebSdkInteroperability(agora_rtc__IRtcEngine__Handle handle,bool enabled);
int agora_rtc__IRtcEngine__sendCustomReportMessage(agora_rtc__IRtcEngine__Handle handle,const char* id,const char* category,const char* event,const char* label,int value);
int agora_rtc__IRtcEngine__registerMediaMetadataObserver(agora_rtc__IRtcEngine__Handle handle,agora_rtc__IMetadataObserver__Handle* observer,agora_rtc__METADATA_TYPE__C type);
int agora_rtc__IRtcEngine__unregisterMediaMetadataObserver(agora_rtc__IRtcEngine__Handle handle,agora_rtc__IMetadataObserver__Handle* observer,agora_rtc__METADATA_TYPE__C type);
int agora_rtc__IRtcEngine__startAudioFrameDump(agora_rtc__IRtcEngine__Handle handle,const char* channel_id,agora_rtc__uid_t__C user_id,const char* location,const char* uuid,const char* passwd,long duration_ms,bool auto_upload);
int agora_rtc__IRtcEngine__stopAudioFrameDump(agora_rtc__IRtcEngine__Handle handle,const char* channel_id,agora_rtc__uid_t__C user_id,const char* location);
int agora_rtc__IRtcEngine__setAINSMode(agora_rtc__IRtcEngine__Handle handle,bool enabled,agora_rtc__AUDIO_AINS_MODE__C mode);
int agora_rtc__IRtcEngine__registerLocalUserAccount(agora_rtc__IRtcEngine__Handle handle,const char* appId,const char* userAccount);
int agora_rtc__IRtcEngine__joinChannelWithUserAccount(agora_rtc__IRtcEngine__Handle handle,const char* token,const char* channelId,const char* userAccount);
int agora_rtc__IRtcEngine__joinChannelWithUserAccount(agora_rtc__IRtcEngine__Handle handle,const char* token,const char* channelId,const char* userAccount,const agora_rtc__ChannelMediaOptions__C& options);
int agora_rtc__IRtcEngine__joinChannelWithUserAccountEx(agora_rtc__IRtcEngine__Handle handle,const char* token,const char* channelId,const char* userAccount,const agora_rtc__ChannelMediaOptions__C& options,agora_rtc__IRtcEngineEventHandler__Handle* eventHandler);
int agora_rtc__IRtcEngine__getUserInfoByUserAccount(agora_rtc__IRtcEngine__Handle handle,const char* userAccount,agora_rtc__UserInfo__C* userInfo);
int agora_rtc__IRtcEngine__getUserInfoByUid(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C uid,agora_rtc__UserInfo__C* userInfo);
int agora_rtc__IRtcEngine__startOrUpdateChannelMediaRelay(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__ChannelMediaRelayConfiguration__C& configuration);
int agora_rtc__IRtcEngine__startChannelMediaRelay(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__ChannelMediaRelayConfiguration__C& configuration);
int agora_rtc__IRtcEngine__updateChannelMediaRelay(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__ChannelMediaRelayConfiguration__C& configuration);
int agora_rtc__IRtcEngine__stopChannelMediaRelay(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__pauseAllChannelMediaRelay(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__resumeAllChannelMediaRelay(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setDirectCdnStreamingAudioConfiguration(agora_rtc__IRtcEngine__Handle handle,agora_rtc__AUDIO_PROFILE_TYPE__C profile);
int agora_rtc__IRtcEngine__setDirectCdnStreamingVideoConfiguration(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__VideoEncoderConfiguration__C& config);
int agora_rtc__IRtcEngine__startDirectCdnStreaming(agora_rtc__IRtcEngine__Handle handle,agora_rtc__IDirectCdnStreamingEventHandler__Handle* eventHandler,const char* publishUrl,const agora_rtc__DirectCdnStreamingMediaOptions__C& options);
int agora_rtc__IRtcEngine__stopDirectCdnStreaming(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__updateDirectCdnStreamingMediaOptions(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__DirectCdnStreamingMediaOptions__C& options);
int agora_rtc__IRtcEngine__startRhythmPlayer(agora_rtc__IRtcEngine__Handle handle,const char* sound1,const char* sound2,const agora_rtc__AgoraRhythmPlayerConfig__C& config);
int agora_rtc__IRtcEngine__stopRhythmPlayer(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__configRhythmPlayer(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__AgoraRhythmPlayerConfig__C& config);
int agora_rtc__IRtcEngine__takeSnapshot(agora_rtc__IRtcEngine__Handle handle,agora_rtc__uid_t__C uid,const char* filePath);
int agora_rtc__IRtcEngine__enableContentInspect(agora_rtc__IRtcEngine__Handle handle,bool enabled,const agora_media__ContentInspectConfig__C& config);
int agora_rtc__IRtcEngine__adjustCustomAudioPublishVolume(agora_rtc__IRtcEngine__Handle handle,agora_rtc__track_id_t__C trackId,int volume);
int agora_rtc__IRtcEngine__adjustCustomAudioPlayoutVolume(agora_rtc__IRtcEngine__Handle handle,agora_rtc__track_id_t__C trackId,int volume);
int agora_rtc__IRtcEngine__setCloudProxy(agora_rtc__IRtcEngine__Handle handle,agora_rtc__CLOUD_PROXY_TYPE__C proxyType);
int agora_rtc__IRtcEngine__setLocalAccessPoint(agora_rtc__IRtcEngine__Handle handle,const agora_rtc__LocalAccessPointConfiguration__C& config);
int agora_rtc__IRtcEngine__setAdvancedAudioOptions(agora_rtc__IRtcEngine__Handle handle,agora_rtc__AdvancedAudioOptions__C& options,int sourceType);
int agora_rtc__IRtcEngine__setAVSyncSource(agora_rtc__IRtcEngine__Handle handle,const char* channelId,agora_rtc__uid_t__C uid);
int agora_rtc__IRtcEngine__enableVideoImageSource(agora_rtc__IRtcEngine__Handle handle,bool enable,const agora_rtc__ImageTrackOptions__C& options);
int64_t agora_rtc__IRtcEngine__getCurrentMonotonicTimeInMs(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__enableWirelessAccelerate(agora_rtc__IRtcEngine__Handle handle,bool enabled);
int agora_rtc__IRtcEngine__getNetworkType(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__setParameters(agora_rtc__IRtcEngine__Handle handle,const char* parameters);
int agora_rtc__IRtcEngine__startMediaRenderingTracing(agora_rtc__IRtcEngine__Handle handle);
int agora_rtc__IRtcEngine__enableInstantMediaRendering(agora_rtc__IRtcEngine__Handle handle);
uint64_t agora_rtc__IRtcEngine__getNtpWallTimeInMs(agora_rtc__IRtcEngine__Handle handle);
bool agora_rtc__IRtcEngine__isFeatureAvailableOnDevice(agora_rtc__IRtcEngine__Handle handle,agora_rtc__FeatureType__C type);
typedef void* agora_rtc__AAudioDeviceManager__Handle;


typedef void* agora_rtc__AVideoDeviceManager__Handle;



typedef enum agora_rtc__QUALITY_REPORT_FORMAT_TYPE__C
{
  QUALITY_REPORT_JSON= 0,
QUALITY_REPORT_HTML= 1,
} agora_rtc__QUALITY_REPORT_FORMAT_TYPE__C;


typedef enum agora_rtc__MEDIA_DEVICE_STATE_TYPE__C
{
  MEDIA_DEVICE_STATE_IDLE= 0,
MEDIA_DEVICE_STATE_ACTIVE= 1,
MEDIA_DEVICE_STATE_DISABLED= 2,
MEDIA_DEVICE_STATE_NOT_PRESENT= 4,
MEDIA_DEVICE_STATE_UNPLUGGED= 8,
} agora_rtc__MEDIA_DEVICE_STATE_TYPE__C;


typedef enum agora_rtc__VIDEO_PROFILE_TYPE__C
{
  VIDEO_PROFILE_LANDSCAPE_120P= 0,
VIDEO_PROFILE_LANDSCAPE_120P_3= 2,
VIDEO_PROFILE_LANDSCAPE_180P= 10,
VIDEO_PROFILE_LANDSCAPE_180P_3= 12,
VIDEO_PROFILE_LANDSCAPE_180P_4= 13,
VIDEO_PROFILE_LANDSCAPE_240P= 20,
VIDEO_PROFILE_LANDSCAPE_240P_3= 22,
VIDEO_PROFILE_LANDSCAPE_240P_4= 23,
VIDEO_PROFILE_LANDSCAPE_360P= 30,
VIDEO_PROFILE_LANDSCAPE_360P_3= 32,
VIDEO_PROFILE_LANDSCAPE_360P_4= 33,
VIDEO_PROFILE_LANDSCAPE_360P_6= 35,
VIDEO_PROFILE_LANDSCAPE_360P_7= 36,
VIDEO_PROFILE_LANDSCAPE_360P_8= 37,
VIDEO_PROFILE_LANDSCAPE_360P_9= 38,
VIDEO_PROFILE_LANDSCAPE_360P_10= 39,
VIDEO_PROFILE_LANDSCAPE_360P_11= 100,
VIDEO_PROFILE_LANDSCAPE_480P= 40,
VIDEO_PROFILE_LANDSCAPE_480P_3= 42,
VIDEO_PROFILE_LANDSCAPE_480P_4= 43,
VIDEO_PROFILE_LANDSCAPE_480P_6= 45,
VIDEO_PROFILE_LANDSCAPE_480P_8= 47,
VIDEO_PROFILE_LANDSCAPE_480P_9= 48,
VIDEO_PROFILE_LANDSCAPE_480P_10= 49,
VIDEO_PROFILE_LANDSCAPE_720P= 50,
VIDEO_PROFILE_LANDSCAPE_720P_3= 52,
VIDEO_PROFILE_LANDSCAPE_720P_5= 54,
VIDEO_PROFILE_LANDSCAPE_720P_6= 55,
VIDEO_PROFILE_LANDSCAPE_1080P= 60,
VIDEO_PROFILE_LANDSCAPE_1080P_3= 62,
VIDEO_PROFILE_LANDSCAPE_1080P_5= 64,
VIDEO_PROFILE_LANDSCAPE_1440P= 66,
VIDEO_PROFILE_LANDSCAPE_1440P_2= 67,
VIDEO_PROFILE_LANDSCAPE_4K= 70,
VIDEO_PROFILE_LANDSCAPE_4K_3= 72,
VIDEO_PROFILE_PORTRAIT_120P= 1000,
VIDEO_PROFILE_PORTRAIT_120P_3= 1002,
VIDEO_PROFILE_PORTRAIT_180P= 1010,
VIDEO_PROFILE_PORTRAIT_180P_3= 1012,
VIDEO_PROFILE_PORTRAIT_180P_4= 1013,
VIDEO_PROFILE_PORTRAIT_240P= 1020,
VIDEO_PROFILE_PORTRAIT_240P_3= 1022,
VIDEO_PROFILE_PORTRAIT_240P_4= 1023,
VIDEO_PROFILE_PORTRAIT_360P= 1030,
VIDEO_PROFILE_PORTRAIT_360P_3= 1032,
VIDEO_PROFILE_PORTRAIT_360P_4= 1033,
VIDEO_PROFILE_PORTRAIT_360P_6= 1035,
VIDEO_PROFILE_PORTRAIT_360P_7= 1036,
VIDEO_PROFILE_PORTRAIT_360P_8= 1037,
VIDEO_PROFILE_PORTRAIT_360P_9= 1038,
VIDEO_PROFILE_PORTRAIT_360P_10= 1039,
VIDEO_PROFILE_PORTRAIT_360P_11= 1100,
VIDEO_PROFILE_PORTRAIT_480P= 1040,
VIDEO_PROFILE_PORTRAIT_480P_3= 1042,
VIDEO_PROFILE_PORTRAIT_480P_4= 1043,
VIDEO_PROFILE_PORTRAIT_480P_6= 1045,
VIDEO_PROFILE_PORTRAIT_480P_8= 1047,
VIDEO_PROFILE_PORTRAIT_480P_9= 1048,
VIDEO_PROFILE_PORTRAIT_480P_10= 1049,
VIDEO_PROFILE_PORTRAIT_720P= 1050,
VIDEO_PROFILE_PORTRAIT_720P_3= 1052,
VIDEO_PROFILE_PORTRAIT_720P_5= 1054,
VIDEO_PROFILE_PORTRAIT_720P_6= 1055,
VIDEO_PROFILE_PORTRAIT_1080P= 1060,
VIDEO_PROFILE_PORTRAIT_1080P_3= 1062,
VIDEO_PROFILE_PORTRAIT_1080P_5= 1064,
VIDEO_PROFILE_PORTRAIT_1440P= 1066,
VIDEO_PROFILE_PORTRAIT_1440P_2= 1067,
VIDEO_PROFILE_PORTRAIT_4K= 1070,
VIDEO_PROFILE_PORTRAIT_4K_3= 1072,
VIDEO_PROFILE_DEFAULT= VIDEO_PROFILE_LANDSCAPE_360P,
} agora_rtc__VIDEO_PROFILE_TYPE__C;

    
    #endif// IAGORARTCENGINE_C_H_
    