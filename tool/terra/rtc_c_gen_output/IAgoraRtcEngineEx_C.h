
    #ifndef IAGORARTCENGINEEX_C_H_
    #define IAGORARTCENGINEEX_C_H_
    
    #include <stdint.h>
    #include <stddef.h>
    
    
    
    #include "IAgoraRtcEngine_C.h"

typedef struct agora_rtc__RtcConnection__C
{
  const char* channelId;
agora_rtc__uid_t__C localUid;
} agora_rtc__RtcConnection__C;

typedef void* agora_rtc__IRtcEngineEventHandlerEx__Handle;

const char* agora_rtc__IRtcEngineEventHandlerEx__eventHandlerType(agora_rtc__IRtcEngineEventHandlerEx__Handle handle);
void agora_rtc__IRtcEngineEventHandlerEx__onJoinChannelSuccess(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onRejoinChannelSuccess(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onAudioQuality(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,int quality,unsigned short delay,unsigned short lost);
void agora_rtc__IRtcEngineEventHandlerEx__onAudioVolumeIndication(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,const agora_rtc__AudioVolumeInfo__C* speakers,unsigned int speakerNumber,int totalVolume);
void agora_rtc__IRtcEngineEventHandlerEx__onLeaveChannel(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,const agora_rtc__RtcStats__C& stats);
void agora_rtc__IRtcEngineEventHandlerEx__onRtcStats(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,const agora_rtc__RtcStats__C& stats);
void agora_rtc__IRtcEngineEventHandlerEx__onNetworkQuality(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,int txQuality,int rxQuality);
void agora_rtc__IRtcEngineEventHandlerEx__onIntraRequestReceived(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
void agora_rtc__IRtcEngineEventHandlerEx__onFirstLocalVideoFramePublished(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onFirstRemoteVideoDecoded(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,int width,int height,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onVideoSizeChanged(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__VIDEO_SOURCE_TYPE__C sourceType,agora_rtc__uid_t__C uid,int width,int height,int rotation);
void agora_rtc__IRtcEngineEventHandlerEx__onLocalVideoStateChanged(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__LOCAL_VIDEO_STREAM_STATE__C state,agora_rtc__LOCAL_VIDEO_STREAM_ERROR__C errorCode);
void agora_rtc__IRtcEngineEventHandlerEx__onRemoteVideoStateChanged(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,agora_rtc__REMOTE_VIDEO_STATE__C state,agora_rtc__REMOTE_VIDEO_STATE_REASON__C reason,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onFirstRemoteVideoFrame(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,int width,int height,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onUserJoined(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onUserOffline(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,agora_rtc__USER_OFFLINE_REASON_TYPE__C reason);
void agora_rtc__IRtcEngineEventHandlerEx__onUserMuteAudio(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,bool muted);
void agora_rtc__IRtcEngineEventHandlerEx__onUserMuteVideo(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,bool muted);
void agora_rtc__IRtcEngineEventHandlerEx__onUserEnableVideo(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,bool enabled);
void agora_rtc__IRtcEngineEventHandlerEx__onUserEnableLocalVideo(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,bool enabled);
void agora_rtc__IRtcEngineEventHandlerEx__onUserStateChanged(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,uint32_t state);
void agora_rtc__IRtcEngineEventHandlerEx__onLocalAudioStats(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,const agora_rtc__LocalAudioStats__C& stats);
void agora_rtc__IRtcEngineEventHandlerEx__onRemoteAudioStats(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,const agora_rtc__RemoteAudioStats__C& stats);
void agora_rtc__IRtcEngineEventHandlerEx__onLocalVideoStats(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,const agora_rtc__LocalVideoStats__C& stats);
void agora_rtc__IRtcEngineEventHandlerEx__onRemoteVideoStats(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,const agora_rtc__RemoteVideoStats__C& stats);
void agora_rtc__IRtcEngineEventHandlerEx__onConnectionLost(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
void agora_rtc__IRtcEngineEventHandlerEx__onConnectionInterrupted(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
void agora_rtc__IRtcEngineEventHandlerEx__onConnectionBanned(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
void agora_rtc__IRtcEngineEventHandlerEx__onStreamMessage(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,int streamId,const char* data,size_t length,uint64_t sentTs);
void agora_rtc__IRtcEngineEventHandlerEx__onStreamMessageError(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,int streamId,int code,int missed,int cached);
void agora_rtc__IRtcEngineEventHandlerEx__onRequestToken(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
void agora_rtc__IRtcEngineEventHandlerEx__onLicenseValidationFailure(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora__LICENSE_ERROR_TYPE__C reason);
void agora_rtc__IRtcEngineEventHandlerEx__onTokenPrivilegeWillExpire(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,const char* token);
void agora_rtc__IRtcEngineEventHandlerEx__onFirstLocalAudioFramePublished(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onFirstRemoteAudioFrame(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C userId,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onFirstRemoteAudioDecoded(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C uid,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onLocalAudioStateChanged(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__LOCAL_AUDIO_STREAM_STATE__C state,agora_rtc__LOCAL_AUDIO_STREAM_ERROR__C error);
void agora_rtc__IRtcEngineEventHandlerEx__onRemoteAudioStateChanged(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,agora_rtc__REMOTE_AUDIO_STATE__C state,agora_rtc__REMOTE_AUDIO_STATE_REASON__C reason,int elapsed);
void agora_rtc__IRtcEngineEventHandlerEx__onActiveSpeaker(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C uid);
void agora_rtc__IRtcEngineEventHandlerEx__onClientRoleChanged(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__CLIENT_ROLE_TYPE__C oldRole,agora_rtc__CLIENT_ROLE_TYPE__C newRole,const agora_rtc__ClientRoleOptions__C& newRoleOptions);
void agora_rtc__IRtcEngineEventHandlerEx__onClientRoleChangeFailed(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__CLIENT_ROLE_CHANGE_FAILED_REASON__C reason,agora_rtc__CLIENT_ROLE_TYPE__C currentRole);
void agora_rtc__IRtcEngineEventHandlerEx__onRemoteAudioTransportStats(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,unsigned short delay,unsigned short lost,unsigned short rxKBitRate);
void agora_rtc__IRtcEngineEventHandlerEx__onRemoteVideoTransportStats(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,unsigned short delay,unsigned short lost,unsigned short rxKBitRate);
void agora_rtc__IRtcEngineEventHandlerEx__onConnectionStateChanged(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__CONNECTION_STATE_TYPE__C state,agora_rtc__CONNECTION_CHANGED_REASON_TYPE__C reason);
void agora_rtc__IRtcEngineEventHandlerEx__onWlAccMessage(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__WLACC_MESSAGE_REASON__C reason,agora_rtc__WLACC_SUGGEST_ACTION__C action,const char* wlAccMsg);
void agora_rtc__IRtcEngineEventHandlerEx__onWlAccStats(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__WlAccStats__C currentStats,agora_rtc__WlAccStats__C averageStats);
void agora_rtc__IRtcEngineEventHandlerEx__onNetworkTypeChanged(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__NETWORK_TYPE__C type);
void agora_rtc__IRtcEngineEventHandlerEx__onEncryptionError(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__ENCRYPTION_ERROR_TYPE__C errorType);
void agora_rtc__IRtcEngineEventHandlerEx__onUploadLogResult(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,const char* requestId,bool success,agora_rtc__UPLOAD_ERROR_REASON__C reason);
void agora_rtc__IRtcEngineEventHandlerEx__onUserAccountUpdated(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C remoteUid,const char* userAccount);
void agora_rtc__IRtcEngineEventHandlerEx__onSnapshotTaken(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C uid,const char* filePath,int width,int height,int errCode);
void agora_rtc__IRtcEngineEventHandlerEx__onVideoRenderingTracingResult(agora_rtc__IRtcEngineEventHandlerEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C uid,agora_rtc__MEDIA_TRACE_EVENT__C currentEvent,agora_rtc__VideoRenderingTracingInfo__C tracingInfo);
typedef void* agora_rtc__IRtcEngineEx__Handle;

int agora_rtc__IRtcEngineEx__joinChannelEx(agora_rtc__IRtcEngineEx__Handle handle,const char* token,const agora_rtc__RtcConnection__C& connection,const agora_rtc__ChannelMediaOptions__C& options,agora_rtc__IRtcEngineEventHandler__Handle* eventHandler);
int agora_rtc__IRtcEngineEx__leaveChannelEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__leaveChannelEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection,const agora_rtc__LeaveChannelOptions__C& options);
int agora_rtc__IRtcEngineEx__updateChannelMediaOptionsEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__ChannelMediaOptions__C& options,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setVideoEncoderConfigurationEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__VideoEncoderConfiguration__C& config,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setupRemoteVideoEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__VideoCanvas__C& canvas,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__muteRemoteAudioStreamEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C uid,bool mute,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__muteRemoteVideoStreamEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C uid,bool mute,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setRemoteVideoStreamTypeEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C uid,agora_rtc__VIDEO_STREAM_TYPE__C streamType,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__muteLocalAudioStreamEx(agora_rtc__IRtcEngineEx__Handle handle,bool mute,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__muteLocalVideoStreamEx(agora_rtc__IRtcEngineEx__Handle handle,bool mute,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__muteAllRemoteAudioStreamsEx(agora_rtc__IRtcEngineEx__Handle handle,bool mute,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__muteAllRemoteVideoStreamsEx(agora_rtc__IRtcEngineEx__Handle handle,bool mute,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setSubscribeAudioBlocklistEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C* uidList,int uidNumber,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setSubscribeAudioAllowlistEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C* uidList,int uidNumber,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setSubscribeVideoBlocklistEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C* uidList,int uidNumber,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setSubscribeVideoAllowlistEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C* uidList,int uidNumber,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setRemoteVideoSubscriptionOptionsEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C uid,const agora_rtc__VideoSubscriptionOptions__C& options,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setRemoteVoicePositionEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C uid,double pan,double gain,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setRemoteUserSpatialAudioParamsEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C uid,const agora__SpatialAudioParams__C& params,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setRemoteRenderModeEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C uid,agora_media_base__RENDER_MODE_TYPE__C renderMode,agora_rtc__VIDEO_MIRROR_MODE_TYPE__C mirrorMode,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__enableLoopbackRecordingEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection,bool enabled,const char* deviceName);
int agora_rtc__IRtcEngineEx__adjustRecordingSignalVolumeEx(agora_rtc__IRtcEngineEx__Handle handle,int volume,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__muteRecordingSignalEx(agora_rtc__IRtcEngineEx__Handle handle,bool mute,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__adjustUserPlaybackSignalVolumeEx(agora_rtc__IRtcEngineEx__Handle handle,unsigned int uid,int volume,const agora_rtc__RtcConnection__C& connection);
agora_rtc__CONNECTION_STATE_TYPE__C agora_rtc__IRtcEngineEx__getConnectionStateEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__enableEncryptionEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection,bool enabled,const agora_rtc__EncryptionConfig__C& config);
int agora_rtc__IRtcEngineEx__createDataStreamEx(agora_rtc__IRtcEngineEx__Handle handle,int* streamId,bool reliable,bool ordered,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__createDataStreamEx(agora_rtc__IRtcEngineEx__Handle handle,int* streamId,agora_rtc__DataStreamConfig__C& config,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__sendStreamMessageEx(agora_rtc__IRtcEngineEx__Handle handle,int streamId,const char* data,size_t length,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__addVideoWatermarkEx(agora_rtc__IRtcEngineEx__Handle handle,const char* watermarkUrl,const agora_rtc__WatermarkOptions__C& options,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__clearVideoWatermarkEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__sendCustomReportMessageEx(agora_rtc__IRtcEngineEx__Handle handle,const char* id,const char* category,const char* event,const char* label,int value,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__enableAudioVolumeIndicationEx(agora_rtc__IRtcEngineEx__Handle handle,int interval,int smooth,bool reportVad,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__startRtmpStreamWithoutTranscodingEx(agora_rtc__IRtcEngineEx__Handle handle,const char* url,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__startRtmpStreamWithTranscodingEx(agora_rtc__IRtcEngineEx__Handle handle,const char* url,const agora_rtc__LiveTranscoding__C& transcoding,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__updateRtmpTranscodingEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__LiveTranscoding__C& transcoding,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__stopRtmpStreamEx(agora_rtc__IRtcEngineEx__Handle handle,const char* url,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__startOrUpdateChannelMediaRelayEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__ChannelMediaRelayConfiguration__C& configuration,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__startChannelMediaRelayEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__ChannelMediaRelayConfiguration__C& configuration,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__updateChannelMediaRelayEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__ChannelMediaRelayConfiguration__C& configuration,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__stopChannelMediaRelayEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__pauseAllChannelMediaRelayEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__resumeAllChannelMediaRelayEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__getUserInfoByUserAccountEx(agora_rtc__IRtcEngineEx__Handle handle,const char* userAccount,agora_rtc__UserInfo__C* userInfo,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__getUserInfoByUidEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C uid,agora_rtc__UserInfo__C* userInfo,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__enableDualStreamModeEx(agora_rtc__IRtcEngineEx__Handle handle,bool enabled,const agora_rtc__SimulcastStreamConfig__C& streamConfig,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setDualStreamModeEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__SIMULCAST_STREAM_MODE__C mode,const agora_rtc__SimulcastStreamConfig__C& streamConfig,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__setHighPriorityUserListEx(agora_rtc__IRtcEngineEx__Handle handle,agora_rtc__uid_t__C* uidList,int uidNum,agora_rtc__STREAM_FALLBACK_OPTIONS__C option,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__takeSnapshotEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection,agora_rtc__uid_t__C uid,const char* filePath);
int agora_rtc__IRtcEngineEx__enableContentInspectEx(agora_rtc__IRtcEngineEx__Handle handle,bool enabled,const agora_media__ContentInspectConfig__C& config,const agora_rtc__RtcConnection__C& connection);
int agora_rtc__IRtcEngineEx__startMediaRenderingTracingEx(agora_rtc__IRtcEngineEx__Handle handle,const agora_rtc__RtcConnection__C& connection);
    
    #endif// IAGORARTCENGINEEX_C_H_
    