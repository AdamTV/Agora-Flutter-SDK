
    #ifndef AGORABASE_C_H_
    #define AGORABASE_C_H_
    
    #include <stdint.h>
    #include <stddef.h>
    
    
    
    





#include "AgoraMediaBase_C.h"






typedef enum agora__CHANNEL_PROFILE_TYPE__C
{
  CHANNEL_PROFILE_COMMUNICATION= 0,
CHANNEL_PROFILE_LIVE_BROADCASTING= 1,
CHANNEL_PROFILE_GAME= 2,
CHANNEL_PROFILE_CLOUD_GAMING= 3,
CHANNEL_PROFILE_COMMUNICATION_1v1= 4,
} agora__CHANNEL_PROFILE_TYPE__C;


typedef enum agora__WARN_CODE_TYPE__C
{
  WARN_INVALID_VIEW= 8,
WARN_INIT_VIDEO= 16,
WARN_PENDING= 20,
WARN_NO_AVAILABLE_CHANNEL= 103,
WARN_LOOKUP_CHANNEL_TIMEOUT= 104,
WARN_LOOKUP_CHANNEL_REJECTED= 105,
WARN_OPEN_CHANNEL_TIMEOUT= 106,
WARN_OPEN_CHANNEL_REJECTED= 107,
WARN_SWITCH_LIVE_VIDEO_TIMEOUT= 111,
WARN_SET_CLIENT_ROLE_TIMEOUT= 118,
WARN_OPEN_CHANNEL_INVALID_TICKET= 121,
WARN_OPEN_CHANNEL_TRY_NEXT_VOS= 122,
WARN_CHANNEL_CONNECTION_UNRECOVERABLE= 131,
WARN_CHANNEL_CONNECTION_IP_CHANGED= 132,
WARN_CHANNEL_CONNECTION_PORT_CHANGED= 133,
WARN_CHANNEL_SOCKET_ERROR= 134,
WARN_AUDIO_MIXING_OPEN_ERROR= 701,
WARN_ADM_RUNTIME_PLAYOUT_WARNING= 1014,
WARN_ADM_RUNTIME_RECORDING_WARNING= 1016,
WARN_ADM_RECORD_AUDIO_SILENCE= 1019,
WARN_ADM_PLAYOUT_MALFUNCTION= 1020,
WARN_ADM_RECORD_MALFUNCTION= 1021,
WARN_ADM_RECORD_AUDIO_LOWLEVEL= 1031,
WARN_ADM_PLAYOUT_AUDIO_LOWLEVEL= 1032,
WARN_ADM_WINDOWS_NO_DATA_READY_EVENT= 1040,
WARN_APM_HOWLING= 1051,
WARN_ADM_GLITCH_STATE= 1052,
WARN_ADM_IMPROPER_SETTINGS= 1053,
WARN_ADM_WIN_CORE_NO_RECORDING_DEVICE= 1322,
WARN_ADM_WIN_CORE_NO_PLAYOUT_DEVICE= 1323,
WARN_ADM_WIN_CORE_IMPROPER_CAPTURE_RELEASE= 1324,
} agora__WARN_CODE_TYPE__C;


typedef enum agora__ERROR_CODE_TYPE__C
{
  ERR_OK= 0,
ERR_FAILED= 1,
ERR_INVALID_ARGUMENT= 2,
ERR_NOT_READY= 3,
ERR_NOT_SUPPORTED= 4,
ERR_REFUSED= 5,
ERR_BUFFER_TOO_SMALL= 6,
ERR_NOT_INITIALIZED= 7,
ERR_INVALID_STATE= 8,
ERR_NO_PERMISSION= 9,
ERR_TIMEDOUT= 10,
ERR_CANCELED= 11,
ERR_TOO_OFTEN= 12,
ERR_BIND_SOCKET= 13,
ERR_NET_DOWN= 14,
ERR_JOIN_CHANNEL_REJECTED= 17,
ERR_LEAVE_CHANNEL_REJECTED= 18,
ERR_ALREADY_IN_USE= 19,
ERR_ABORTED= 20,
ERR_INIT_NET_ENGINE= 21,
ERR_RESOURCE_LIMITED= 22,
ERR_INVALID_APP_ID= 101,
ERR_INVALID_CHANNEL_NAME= 102,
ERR_NO_SERVER_RESOURCES= 103,
ERR_TOKEN_EXPIRED= 109,
ERR_INVALID_TOKEN= 110,
ERR_CONNECTION_INTERRUPTED= 111,
ERR_CONNECTION_LOST= 112,
ERR_NOT_IN_CHANNEL= 113,
ERR_SIZE_TOO_LARGE= 114,
ERR_BITRATE_LIMIT= 115,
ERR_TOO_MANY_DATA_STREAMS= 116,
ERR_STREAM_MESSAGE_TIMEOUT= 117,
ERR_SET_CLIENT_ROLE_NOT_AUTHORIZED= 119,
ERR_DECRYPTION_FAILED= 120,
ERR_INVALID_USER_ID= 121,
ERR_CLIENT_IS_BANNED_BY_SERVER= 123,
ERR_ENCRYPTED_STREAM_NOT_ALLOWED_PUBLISH= 130,
ERR_LICENSE_CREDENTIAL_INVALID= 131,
ERR_INVALID_USER_ACCOUNT= 134,
ERR_MODULE_NOT_FOUND= 157,
ERR_CERT_RAW= 157,
ERR_CERT_JSON_PART= 158,
ERR_CERT_JSON_INVAL= 159,
ERR_CERT_JSON_NOMEM= 160,
ERR_CERT_CUSTOM= 161,
ERR_CERT_CREDENTIAL= 162,
ERR_CERT_SIGN= 163,
ERR_CERT_FAIL= 164,
ERR_CERT_BUF= 165,
ERR_CERT_NULL= 166,
ERR_CERT_DUEDATE= 167,
ERR_CERT_REQUEST= 168,
ERR_PCMSEND_FORMAT= 200,
ERR_PCMSEND_BUFFEROVERFLOW= 201,
ERR_LOGIN_ALREADY_LOGIN= 428,
ERR_LOAD_MEDIA_ENGINE= 1001,
ERR_ADM_GENERAL_ERROR= 1005,
ERR_ADM_INIT_PLAYOUT= 1008,
ERR_ADM_START_PLAYOUT= 1009,
ERR_ADM_STOP_PLAYOUT= 1010,
ERR_ADM_INIT_RECORDING= 1011,
ERR_ADM_START_RECORDING= 1012,
ERR_ADM_STOP_RECORDING= 1013,
ERR_VDM_CAMERA_NOT_AUTHORIZED= 1501,
ERR_ADM_APPLICATION_LOOPBACK= 2007,
} agora__ERROR_CODE_TYPE__C;


typedef enum agora__LICENSE_ERROR_TYPE__C
{
  LICENSE_ERR_INVALID= 1,
LICENSE_ERR_EXPIRE= 2,
LICENSE_ERR_MINUTES_EXCEED= 3,
LICENSE_ERR_LIMITED_PERIOD= 4,
LICENSE_ERR_DIFF_DEVICES= 5,
LICENSE_ERR_INTERNAL= 99,
} agora__LICENSE_ERROR_TYPE__C;


typedef enum agora__AUDIO_SESSION_OPERATION_RESTRICTION__C
{
  AUDIO_SESSION_OPERATION_RESTRICTION_NONE= 0,
AUDIO_SESSION_OPERATION_RESTRICTION_SET_CATEGORY= 1,
AUDIO_SESSION_OPERATION_RESTRICTION_CONFIGURE_SESSION= 1<<1,
AUDIO_SESSION_OPERATION_RESTRICTION_DEACTIVATE_SESSION= 1<<2,
AUDIO_SESSION_OPERATION_RESTRICTION_ALL= 1<<7,
} agora__AUDIO_SESSION_OPERATION_RESTRICTION__C;

typedef const char* agora__user_id_t__C;
typedef void* agora__view_t__C;

typedef struct agora__UserInfo__C
{
  char * userId;
bool hasAudio;
bool hasVideo;
} agora__UserInfo__C;

typedef agora__UserInfo__C agora__UserList__C;

typedef enum agora_rtc__USER_OFFLINE_REASON_TYPE__C
{
  USER_OFFLINE_QUIT= 0,
USER_OFFLINE_DROPPED= 1,
USER_OFFLINE_BECOME_AUDIENCE= 2,
} agora_rtc__USER_OFFLINE_REASON_TYPE__C;


typedef enum agora_rtc__INTERFACE_ID_TYPE__C
{
  AGORA_IID_AUDIO_DEVICE_MANAGER= 1,
AGORA_IID_VIDEO_DEVICE_MANAGER= 2,
AGORA_IID_PARAMETER_ENGINE= 3,
AGORA_IID_MEDIA_ENGINE= 4,
AGORA_IID_AUDIO_ENGINE= 5,
AGORA_IID_VIDEO_ENGINE= 6,
AGORA_IID_RTC_CONNECTION= 7,
AGORA_IID_SIGNALING_ENGINE= 8,
AGORA_IID_MEDIA_ENGINE_REGULATOR= 9,
AGORA_IID_CLOUD_SPATIAL_AUDIO= 10,
AGORA_IID_LOCAL_SPATIAL_AUDIO= 11,
AGORA_IID_STATE_SYNC= 13,
AGORA_IID_METACHAT_SERVICE= 14,
AGORA_IID_MUSIC_CONTENT_CENTER= 15,
AGORA_IID_H265_TRANSCODER= 16,
} agora_rtc__INTERFACE_ID_TYPE__C;


typedef enum agora_rtc__QUALITY_TYPE__C
{
  QUALITY_UNKNOWN= 0,
QUALITY_EXCELLENT= 1,
QUALITY_GOOD= 2,
QUALITY_POOR= 3,
QUALITY_BAD= 4,
QUALITY_VBAD= 5,
QUALITY_DOWN= 6,
QUALITY_UNSUPPORTED= 7,
QUALITY_DETECTING= 8,
} agora_rtc__QUALITY_TYPE__C;


typedef enum agora_rtc__FIT_MODE_TYPE__C
{
  MODE_COVER= 1,
MODE_CONTAIN= 2,
} agora_rtc__FIT_MODE_TYPE__C;


typedef enum agora_rtc__VIDEO_ORIENTATION__C
{
  VIDEO_ORIENTATION_0= 0,
VIDEO_ORIENTATION_90= 90,
VIDEO_ORIENTATION_180= 180,
VIDEO_ORIENTATION_270= 270,
} agora_rtc__VIDEO_ORIENTATION__C;


typedef enum agora_rtc__FRAME_RATE__C
{
  FRAME_RATE_FPS_1= 1,
FRAME_RATE_FPS_7= 7,
FRAME_RATE_FPS_10= 10,
FRAME_RATE_FPS_15= 15,
FRAME_RATE_FPS_24= 24,
FRAME_RATE_FPS_30= 30,
FRAME_RATE_FPS_60= 60,
} agora_rtc__FRAME_RATE__C;


typedef enum agora_rtc__FRAME_WIDTH__C
{
  FRAME_WIDTH_960= 960,
} agora_rtc__FRAME_WIDTH__C;


typedef enum agora_rtc__FRAME_HEIGHT__C
{
  FRAME_HEIGHT_540= 540,
} agora_rtc__FRAME_HEIGHT__C;


typedef enum agora_rtc__VIDEO_FRAME_TYPE__C
{
  VIDEO_FRAME_TYPE_BLANK_FRAME= 0,
VIDEO_FRAME_TYPE_KEY_FRAME= 3,
VIDEO_FRAME_TYPE_DELTA_FRAME= 4,
VIDEO_FRAME_TYPE_B_FRAME= 5,
VIDEO_FRAME_TYPE_DROPPABLE_FRAME= 6,
VIDEO_FRAME_TYPE_UNKNOW,
} agora_rtc__VIDEO_FRAME_TYPE__C;


typedef enum agora_rtc__ORIENTATION_MODE__C
{
  ORIENTATION_MODE_ADAPTIVE= 0,
ORIENTATION_MODE_FIXED_LANDSCAPE= 1,
ORIENTATION_MODE_FIXED_PORTRAIT= 2,
} agora_rtc__ORIENTATION_MODE__C;


typedef enum agora_rtc__DEGRADATION_PREFERENCE__C
{
  MAINTAIN_QUALITY= 0,
MAINTAIN_FRAMERATE= 1,
MAINTAIN_BALANCED= 2,
MAINTAIN_RESOLUTION= 3,
DISABLED= 100,
} agora_rtc__DEGRADATION_PREFERENCE__C;


typedef struct agora_rtc__VideoDimensions__C
{
  int width;
int height;
} agora_rtc__VideoDimensions__C;






typedef enum agora_rtc__SCREEN_CAPTURE_FRAMERATE_CAPABILITY__C
{
  SCREEN_CAPTURE_FRAMERATE_CAPABILITY_15_FPS= 0,
SCREEN_CAPTURE_FRAMERATE_CAPABILITY_30_FPS= 1,
SCREEN_CAPTURE_FRAMERATE_CAPABILITY_60_FPS= 2,
} agora_rtc__SCREEN_CAPTURE_FRAMERATE_CAPABILITY__C;


typedef enum agora_rtc__VIDEO_CODEC_CAPABILITY_LEVEL__C
{
  CODEC_CAPABILITY_LEVEL_UNSPECIFIED= -1,
CODEC_CAPABILITY_LEVEL_BASIC_SUPPORT= 5,
CODEC_CAPABILITY_LEVEL_1080P30FPS= 10,
CODEC_CAPABILITY_LEVEL_1080P60FPS= 20,
CODEC_CAPABILITY_LEVEL_4K60FPS= 30,
} agora_rtc__VIDEO_CODEC_CAPABILITY_LEVEL__C;


typedef enum agora_rtc__VIDEO_CODEC_TYPE__C
{
  VIDEO_CODEC_NONE= 0,
VIDEO_CODEC_VP8= 1,
VIDEO_CODEC_H264= 2,
VIDEO_CODEC_H265= 3,
VIDEO_CODEC_GENERIC= 6,
VIDEO_CODEC_GENERIC_H264= 7,
VIDEO_CODEC_AV1= 12,
VIDEO_CODEC_VP9= 13,
VIDEO_CODEC_GENERIC_JPEG= 20,
} agora_rtc__VIDEO_CODEC_TYPE__C;


typedef enum agora_rtc__TCcMode__C
{
  CC_ENABLED,
CC_DISABLED,
} agora_rtc__TCcMode__C;


typedef struct agora_rtc__SenderOptions__C
{
  agora_rtc__TCcMode__C ccMode;
agora_rtc__VIDEO_CODEC_TYPE__C codecType;
int targetBitrate;
} agora_rtc__SenderOptions__C;


typedef enum agora_rtc__AUDIO_CODEC_TYPE__C
{
  AUDIO_CODEC_OPUS= 1,
AUDIO_CODEC_PCMA= 3,
AUDIO_CODEC_PCMU= 4,
AUDIO_CODEC_G722= 5,
AUDIO_CODEC_AACLC= 8,
AUDIO_CODEC_HEAAC= 9,
AUDIO_CODEC_JC1= 10,
AUDIO_CODEC_HEAAC2= 11,
AUDIO_CODEC_LPCNET= 12,
} agora_rtc__AUDIO_CODEC_TYPE__C;


typedef enum agora_rtc__AUDIO_ENCODING_TYPE__C
{
  AUDIO_ENCODING_TYPE_AAC_16000_LOW= 0x010101,
AUDIO_ENCODING_TYPE_AAC_16000_MEDIUM= 0x010102,
AUDIO_ENCODING_TYPE_AAC_32000_LOW= 0x010201,
AUDIO_ENCODING_TYPE_AAC_32000_MEDIUM= 0x010202,
AUDIO_ENCODING_TYPE_AAC_32000_HIGH= 0x010203,
AUDIO_ENCODING_TYPE_AAC_48000_MEDIUM= 0x010302,
AUDIO_ENCODING_TYPE_AAC_48000_HIGH= 0x010303,
AUDIO_ENCODING_TYPE_OPUS_16000_LOW= 0x020101,
AUDIO_ENCODING_TYPE_OPUS_16000_MEDIUM= 0x020102,
AUDIO_ENCODING_TYPE_OPUS_48000_MEDIUM= 0x020302,
AUDIO_ENCODING_TYPE_OPUS_48000_HIGH= 0x020303,
} agora_rtc__AUDIO_ENCODING_TYPE__C;


typedef enum agora_rtc__WATERMARK_FIT_MODE__C
{
  FIT_MODE_COVER_POSITION,
FIT_MODE_USE_IMAGE_RATIO,
} agora_rtc__WATERMARK_FIT_MODE__C;


typedef struct agora_rtc__EncodedAudioFrameAdvancedSettings__C
{
  bool speech;
bool sendEvenIfEmpty;
} agora_rtc__EncodedAudioFrameAdvancedSettings__C;


typedef struct agora_rtc__EncodedAudioFrameInfo__C
{
  agora_rtc__AUDIO_CODEC_TYPE__C codec;
int sampleRateHz;
int samplesPerChannel;
int numberOfChannels;
agora_rtc__EncodedAudioFrameAdvancedSettings__C advancedSettings;
int64_t captureTimeMs;
} agora_rtc__EncodedAudioFrameInfo__C;


typedef struct agora_rtc__AudioPcmDataInfo__C
{
  size_t samplesPerChannel;
int16_t channelNum;
size_t samplesOut;
int64_t elapsedTimeMs;
int64_t ntpTimeMs;
} agora_rtc__AudioPcmDataInfo__C;


typedef enum agora_rtc__H264PacketizeMode__C
{
  NonInterleaved= 0,
SingleNalUnit,
} agora_rtc__H264PacketizeMode__C;


typedef enum agora_rtc__VIDEO_STREAM_TYPE__C
{
  VIDEO_STREAM_HIGH= 0,
VIDEO_STREAM_LOW= 1,
} agora_rtc__VIDEO_STREAM_TYPE__C;


typedef struct agora_rtc__VideoSubscriptionOptions__C
{
  agora_rtc__VIDEO_STREAM_TYPE__C type;
bool* encodedFrameOnly;
} agora_rtc__VideoSubscriptionOptions__C;


typedef struct agora_rtc__EncodedVideoFrameInfo__C
{
  agora_rtc__VIDEO_CODEC_TYPE__C codecType;
int width;
int height;
int framesPerSecond;
agora_rtc__VIDEO_FRAME_TYPE__C frameType;
agora_rtc__VIDEO_ORIENTATION__C rotation;
int trackId;
int64_t captureTimeMs;
int64_t decodeTimeMs;
agora_rtc__uid_t__C uid;
agora_rtc__VIDEO_STREAM_TYPE__C streamType;
} agora_rtc__EncodedVideoFrameInfo__C;


typedef enum agora_rtc__COMPRESSION_PREFERENCE__C
{
  PREFER_LOW_LATENCY,
PREFER_QUALITY,
} agora_rtc__COMPRESSION_PREFERENCE__C;


typedef enum agora_rtc__ENCODING_PREFERENCE__C
{
  PREFER_AUTO= -1,
PREFER_SOFTWARE= 0,
PREFER_HARDWARE= 1,
} agora_rtc__ENCODING_PREFERENCE__C;


typedef struct agora_rtc__AdvanceOptions__C
{
  agora_rtc__ENCODING_PREFERENCE__C encodingPreference;
agora_rtc__COMPRESSION_PREFERENCE__C compressionPreference;
} agora_rtc__AdvanceOptions__C;


typedef enum agora_rtc__VIDEO_MIRROR_MODE_TYPE__C
{
  VIDEO_MIRROR_MODE_AUTO= 0,
VIDEO_MIRROR_MODE_ENABLED= 1,
VIDEO_MIRROR_MODE_DISABLED= 2,
} agora_rtc__VIDEO_MIRROR_MODE_TYPE__C;


typedef enum agora_rtc__CODEC_CAP_MASK__C
{
  CODEC_CAP_MASK_NONE= 0,
CODEC_CAP_MASK_HW_DEC= 1<<0,
CODEC_CAP_MASK_HW_ENC= 1<<1,
CODEC_CAP_MASK_SW_DEC= 1<<2,
CODEC_CAP_MASK_SW_ENC= 1<<3,
} agora_rtc__CODEC_CAP_MASK__C;


typedef struct agora_rtc__CodecCapLevels__C
{
  agora_rtc__VIDEO_CODEC_CAPABILITY_LEVEL__C hwDecodingLevel;
agora_rtc__VIDEO_CODEC_CAPABILITY_LEVEL__C swDecodingLevel;
} agora_rtc__CodecCapLevels__C;


typedef struct agora_rtc__CodecCapInfo__C
{
  agora_rtc__VIDEO_CODEC_TYPE__C codecType;
int codecCapMask;
agora_rtc__CodecCapLevels__C codecLevels;
} agora_rtc__CodecCapInfo__C;


typedef struct agora_rtc__VideoEncoderConfiguration__C
{
  agora_rtc__VIDEO_CODEC_TYPE__C codecType;
agora_rtc__VideoDimensions__C dimensions;
int frameRate;
int bitrate;
int minBitrate;
agora_rtc__ORIENTATION_MODE__C orientationMode;
agora_rtc__DEGRADATION_PREFERENCE__C degradationPreference;
agora_rtc__VIDEO_MIRROR_MODE_TYPE__C mirrorMode;
agora_rtc__AdvanceOptions__C advanceOptions;
} agora_rtc__VideoEncoderConfiguration__C;


typedef struct agora_rtc__DataStreamConfig__C
{
  bool syncWithAudio;
bool ordered;
} agora_rtc__DataStreamConfig__C;


typedef enum agora_rtc__SIMULCAST_STREAM_MODE__C
{
  AUTO_SIMULCAST_STREAM= -1,
DISABLE_SIMULCAST_STREAM= 0,
ENABLE_SIMULCAST_STREAM= 1,
} agora_rtc__SIMULCAST_STREAM_MODE__C;


typedef struct agora_rtc__SimulcastStreamConfig__C
{
  agora_rtc__VideoDimensions__C dimensions;
int kBitrate;
int framerate;
} agora_rtc__SimulcastStreamConfig__C;


typedef struct agora_rtc__Rectangle__C
{
  int x;
int y;
int width;
int height;
} agora_rtc__Rectangle__C;


typedef struct agora_rtc__WatermarkRatio__C
{
  float xRatio;
float yRatio;
float widthRatio;
} agora_rtc__WatermarkRatio__C;


typedef struct agora_rtc__WatermarkOptions__C
{
  bool visibleInPreview;
agora_rtc__Rectangle__C positionInLandscapeMode;
agora_rtc__Rectangle__C positionInPortraitMode;
agora_rtc__WatermarkRatio__C watermarkRatio;
agora_rtc__WATERMARK_FIT_MODE__C mode;
} agora_rtc__WatermarkOptions__C;


typedef struct agora_rtc__RtcStats__C
{
  unsigned int duration;
unsigned int txBytes;
unsigned int rxBytes;
unsigned int txAudioBytes;
unsigned int txVideoBytes;
unsigned int rxAudioBytes;
unsigned int rxVideoBytes;
unsigned short txKBitRate;
unsigned short rxKBitRate;
unsigned short rxAudioKBitRate;
unsigned short txAudioKBitRate;
unsigned short rxVideoKBitRate;
unsigned short txVideoKBitRate;
unsigned short lastmileDelay;
unsigned int userCount;
double cpuAppUsage;
double cpuTotalUsage;
int gatewayRtt;
double memoryAppUsageRatio;
double memoryTotalUsageRatio;
int memoryAppUsageInKbytes;
int connectTimeMs;
int firstAudioPacketDuration;
int firstVideoPacketDuration;
int firstVideoKeyFramePacketDuration;
int packetsBeforeFirstKeyFramePacket;
int firstAudioPacketDurationAfterUnmute;
int firstVideoPacketDurationAfterUnmute;
int firstVideoKeyFramePacketDurationAfterUnmute;
int firstVideoKeyFrameDecodedDurationAfterUnmute;
int firstVideoKeyFrameRenderedDurationAfterUnmute;
int txPacketLossRate;
int rxPacketLossRate;
} agora_rtc__RtcStats__C;


typedef enum agora_rtc__CLIENT_ROLE_TYPE__C
{
  CLIENT_ROLE_BROADCASTER= 1,
CLIENT_ROLE_AUDIENCE= 2,
} agora_rtc__CLIENT_ROLE_TYPE__C;


typedef enum agora_rtc__QUALITY_ADAPT_INDICATION__C
{
  ADAPT_NONE= 0,
ADAPT_UP_BANDWIDTH= 1,
ADAPT_DOWN_BANDWIDTH= 2,
} agora_rtc__QUALITY_ADAPT_INDICATION__C;


typedef enum agora_rtc__AUDIENCE_LATENCY_LEVEL_TYPE__C
{
  AUDIENCE_LATENCY_LEVEL_LOW_LATENCY= 1,
AUDIENCE_LATENCY_LEVEL_ULTRA_LOW_LATENCY= 2,
} agora_rtc__AUDIENCE_LATENCY_LEVEL_TYPE__C;


typedef struct agora_rtc__ClientRoleOptions__C
{
  agora_rtc__AUDIENCE_LATENCY_LEVEL_TYPE__C audienceLatencyLevel;
} agora_rtc__ClientRoleOptions__C;


typedef enum agora_rtc__EXPERIENCE_QUALITY_TYPE__C
{
  EXPERIENCE_QUALITY_GOOD= 0,
EXPERIENCE_QUALITY_BAD= 1,
} agora_rtc__EXPERIENCE_QUALITY_TYPE__C;


typedef enum agora_rtc__EXPERIENCE_POOR_REASON__C
{
  EXPERIENCE_REASON_NONE= 0,
REMOTE_NETWORK_QUALITY_POOR= 1,
LOCAL_NETWORK_QUALITY_POOR= 2,
WIRELESS_SIGNAL_POOR= 4,
WIFI_BLUETOOTH_COEXIST= 8,
} agora_rtc__EXPERIENCE_POOR_REASON__C;


typedef enum agora_rtc__AUDIO_AINS_MODE__C
{
  AINS_MODE_BALANCED= 0,
AINS_MODE_AGGRESSIVE= 1,
AINS_MODE_ULTRALOWLATENCY= 2,
} agora_rtc__AUDIO_AINS_MODE__C;


typedef enum agora_rtc__AUDIO_PROFILE_TYPE__C
{
  AUDIO_PROFILE_DEFAULT= 0,
AUDIO_PROFILE_SPEECH_STANDARD= 1,
AUDIO_PROFILE_MUSIC_STANDARD= 2,
AUDIO_PROFILE_MUSIC_STANDARD_STEREO= 3,
AUDIO_PROFILE_MUSIC_HIGH_QUALITY= 4,
AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO= 5,
AUDIO_PROFILE_IOT= 6,
AUDIO_PROFILE_NUM= 7,
} agora_rtc__AUDIO_PROFILE_TYPE__C;


typedef enum agora_rtc__AUDIO_SCENARIO_TYPE__C
{
  AUDIO_SCENARIO_DEFAULT= 0,
AUDIO_SCENARIO_GAME_STREAMING= 3,
AUDIO_SCENARIO_CHATROOM= 5,
AUDIO_SCENARIO_CHORUS= 7,
AUDIO_SCENARIO_MEETING= 8,
AUDIO_SCENARIO_NUM= 9,
} agora_rtc__AUDIO_SCENARIO_TYPE__C;


typedef enum agora_rtc____C
{
  kMaxWidthInPixels= 3840,
kMaxHeightInPixels= 2160,
kMaxFps= 60,
} agora_rtc____C;


typedef struct agora_rtc__VideoFormat__C
{
  int width;
int height;
int fps;
} agora_rtc__VideoFormat__C;


typedef enum agora_rtc__VIDEO_CONTENT_HINT__C
{
  CONTENT_HINT_NONE,
CONTENT_HINT_MOTION,
CONTENT_HINT_DETAILS,
} agora_rtc__VIDEO_CONTENT_HINT__C;


typedef enum agora_rtc__SCREEN_SCENARIO_TYPE__C
{
  SCREEN_SCENARIO_DOCUMENT= 1,
SCREEN_SCENARIO_GAMING= 2,
SCREEN_SCENARIO_VIDEO= 3,
SCREEN_SCENARIO_RDC= 4,
} agora_rtc__SCREEN_SCENARIO_TYPE__C;


typedef enum agora_rtc__VIDEO_APPLICATION_SCENARIO_TYPE__C
{
  APPLICATION_SCENARIO_GENERAL= 0,
APPLICATION_SCENARIO_MEETING= 1,
} agora_rtc__VIDEO_APPLICATION_SCENARIO_TYPE__C;


typedef enum agora_rtc__CAPTURE_BRIGHTNESS_LEVEL_TYPE__C
{
  CAPTURE_BRIGHTNESS_LEVEL_INVALID= -1,
CAPTURE_BRIGHTNESS_LEVEL_NORMAL= 0,
CAPTURE_BRIGHTNESS_LEVEL_BRIGHT= 1,
CAPTURE_BRIGHTNESS_LEVEL_DARK= 2,
} agora_rtc__CAPTURE_BRIGHTNESS_LEVEL_TYPE__C;


typedef enum agora_rtc__LOCAL_AUDIO_STREAM_STATE__C
{
  LOCAL_AUDIO_STREAM_STATE_STOPPED= 0,
LOCAL_AUDIO_STREAM_STATE_RECORDING= 1,
LOCAL_AUDIO_STREAM_STATE_ENCODING= 2,
LOCAL_AUDIO_STREAM_STATE_FAILED= 3,
} agora_rtc__LOCAL_AUDIO_STREAM_STATE__C;


typedef enum agora_rtc__LOCAL_AUDIO_STREAM_ERROR__C
{
  LOCAL_AUDIO_STREAM_ERROR_OK= 0,
LOCAL_AUDIO_STREAM_ERROR_FAILURE= 1,
LOCAL_AUDIO_STREAM_ERROR_DEVICE_NO_PERMISSION= 2,
LOCAL_AUDIO_STREAM_ERROR_DEVICE_BUSY= 3,
LOCAL_AUDIO_STREAM_ERROR_RECORD_FAILURE= 4,
LOCAL_AUDIO_STREAM_ERROR_ENCODE_FAILURE= 5,
LOCAL_AUDIO_STREAM_ERROR_NO_RECORDING_DEVICE= 6,
LOCAL_AUDIO_STREAM_ERROR_NO_PLAYOUT_DEVICE= 7,
LOCAL_AUDIO_STREAM_ERROR_INTERRUPTED= 8,
LOCAL_AUDIO_STREAM_ERROR_RECORD_INVALID_ID= 9,
LOCAL_AUDIO_STREAM_ERROR_PLAYOUT_INVALID_ID= 10,
} agora_rtc__LOCAL_AUDIO_STREAM_ERROR__C;


typedef enum agora_rtc__LOCAL_VIDEO_STREAM_STATE__C
{
  LOCAL_VIDEO_STREAM_STATE_STOPPED= 0,
LOCAL_VIDEO_STREAM_STATE_CAPTURING= 1,
LOCAL_VIDEO_STREAM_STATE_ENCODING= 2,
LOCAL_VIDEO_STREAM_STATE_FAILED= 3,
} agora_rtc__LOCAL_VIDEO_STREAM_STATE__C;


typedef enum agora_rtc__LOCAL_VIDEO_STREAM_ERROR__C
{
  LOCAL_VIDEO_STREAM_ERROR_OK= 0,
LOCAL_VIDEO_STREAM_ERROR_FAILURE= 1,
LOCAL_VIDEO_STREAM_ERROR_DEVICE_NO_PERMISSION= 2,
LOCAL_VIDEO_STREAM_ERROR_DEVICE_BUSY= 3,
LOCAL_VIDEO_STREAM_ERROR_CAPTURE_FAILURE= 4,
LOCAL_VIDEO_STREAM_ERROR_ENCODE_FAILURE= 5,
LOCAL_VIDEO_STREAM_ERROR_CAPTURE_INBACKGROUND= 6,
LOCAL_VIDEO_STREAM_ERROR_CAPTURE_MULTIPLE_FOREGROUND_APPS= 7,
LOCAL_VIDEO_STREAM_ERROR_DEVICE_NOT_FOUND= 8,
LOCAL_VIDEO_STREAM_ERROR_DEVICE_DISCONNECTED= 9,
LOCAL_VIDEO_STREAM_ERROR_DEVICE_INVALID_ID= 10,
LOCAL_VIDEO_STREAM_ERROR_DEVICE_SYSTEM_PRESSURE= 101,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_MINIMIZED= 11,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_CLOSED= 12,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_OCCLUDED= 13,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_NOT_SUPPORTED= 20,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_FAILURE= 21,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_NO_PERMISSION= 22,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_PAUSED= 23,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_RESUMED= 24,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_HIDDEN= 25,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_RECOVER_FROM_HIDDEN= 26,
LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_RECOVER_FROM_MINIMIZED= 27,
} agora_rtc__LOCAL_VIDEO_STREAM_ERROR__C;


typedef enum agora_rtc__REMOTE_AUDIO_STATE__C
{
  REMOTE_AUDIO_STATE_STOPPED= 0,
REMOTE_AUDIO_STATE_STARTING= 1,
REMOTE_AUDIO_STATE_DECODING= 2,
REMOTE_AUDIO_STATE_FROZEN= 3,
REMOTE_AUDIO_STATE_FAILED= 4,
} agora_rtc__REMOTE_AUDIO_STATE__C;


typedef enum agora_rtc__REMOTE_AUDIO_STATE_REASON__C
{
  REMOTE_AUDIO_REASON_INTERNAL= 0,
REMOTE_AUDIO_REASON_NETWORK_CONGESTION= 1,
REMOTE_AUDIO_REASON_NETWORK_RECOVERY= 2,
REMOTE_AUDIO_REASON_LOCAL_MUTED= 3,
REMOTE_AUDIO_REASON_LOCAL_UNMUTED= 4,
REMOTE_AUDIO_REASON_REMOTE_MUTED= 5,
REMOTE_AUDIO_REASON_REMOTE_UNMUTED= 6,
REMOTE_AUDIO_REASON_REMOTE_OFFLINE= 7,
} agora_rtc__REMOTE_AUDIO_STATE_REASON__C;


typedef enum agora_rtc__REMOTE_VIDEO_STATE__C
{
  REMOTE_VIDEO_STATE_STOPPED= 0,
REMOTE_VIDEO_STATE_STARTING= 1,
REMOTE_VIDEO_STATE_DECODING= 2,
REMOTE_VIDEO_STATE_FROZEN= 3,
REMOTE_VIDEO_STATE_FAILED= 4,
} agora_rtc__REMOTE_VIDEO_STATE__C;


typedef enum agora_rtc__REMOTE_VIDEO_STATE_REASON__C
{
  REMOTE_VIDEO_STATE_REASON_INTERNAL= 0,
REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION= 1,
REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY= 2,
REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED= 3,
REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED= 4,
REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED= 5,
REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED= 6,
REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE= 7,
REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK= 8,
REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY= 9,
REMOTE_VIDEO_STATE_REASON_VIDEO_STREAM_TYPE_CHANGE_TO_LOW= 10,
REMOTE_VIDEO_STATE_REASON_VIDEO_STREAM_TYPE_CHANGE_TO_HIGH= 11,
REMOTE_VIDEO_STATE_REASON_SDK_IN_BACKGROUND= 12,
REMOTE_VIDEO_STATE_REASON_CODEC_NOT_SUPPORT= 13,
} agora_rtc__REMOTE_VIDEO_STATE_REASON__C;


typedef enum agora_rtc__REMOTE_USER_STATE__C
{
  USER_STATE_MUTE_AUDIO= (1<<0),
USER_STATE_MUTE_VIDEO= (1<<1),
USER_STATE_ENABLE_VIDEO= (1<<4),
USER_STATE_ENABLE_LOCAL_VIDEO= (1<<8),
} agora_rtc__REMOTE_USER_STATE__C;


typedef struct agora_rtc__VideoTrackInfo__C
{
  bool isLocal;
agora_rtc__uid_t__C ownerUid;
agora_rtc__track_id_t__C trackId;
const char* channelId;
agora_rtc__VIDEO_STREAM_TYPE__C streamType;
agora_rtc__VIDEO_CODEC_TYPE__C codecType;
bool encodedFrameOnly;
agora_rtc__VIDEO_SOURCE_TYPE__C sourceType;
uint32_t observationPosition;
} agora_rtc__VideoTrackInfo__C;


typedef enum agora_rtc__REMOTE_VIDEO_DOWNSCALE_LEVEL__C
{
  REMOTE_VIDEO_DOWNSCALE_LEVEL_NONE,
REMOTE_VIDEO_DOWNSCALE_LEVEL_1,
REMOTE_VIDEO_DOWNSCALE_LEVEL_2,
REMOTE_VIDEO_DOWNSCALE_LEVEL_3,
REMOTE_VIDEO_DOWNSCALE_LEVEL_4,
} agora_rtc__REMOTE_VIDEO_DOWNSCALE_LEVEL__C;


typedef struct agora_rtc__AudioVolumeInfo__C
{
  agora_rtc__uid_t__C uid;
unsigned int volume;
unsigned int vad;
double voicePitch;
} agora_rtc__AudioVolumeInfo__C;


typedef struct agora_rtc__DeviceInfo__C
{
  bool isLowLatencyAudioSupported;
} agora_rtc__DeviceInfo__C;


typedef struct agora_rtc__Packet__C
{
  const unsigned char* buffer;
unsigned int size;
} agora_rtc__Packet__C;

typedef void* agora_rtc__IPacketObserver__Handle;

bool agora_rtc__IPacketObserver__onSendAudioPacket(agora_rtc__IPacketObserver__Handle handle,agora_rtc__Packet__C& packet);
bool agora_rtc__IPacketObserver__onSendVideoPacket(agora_rtc__IPacketObserver__Handle handle,agora_rtc__Packet__C& packet);
bool agora_rtc__IPacketObserver__onReceiveAudioPacket(agora_rtc__IPacketObserver__Handle handle,agora_rtc__Packet__C& packet);
bool agora_rtc__IPacketObserver__onReceiveVideoPacket(agora_rtc__IPacketObserver__Handle handle,agora_rtc__Packet__C& packet);

typedef enum agora_rtc__AUDIO_SAMPLE_RATE_TYPE__C
{
  AUDIO_SAMPLE_RATE_32000= 32000,
AUDIO_SAMPLE_RATE_44100= 44100,
AUDIO_SAMPLE_RATE_48000= 48000,
} agora_rtc__AUDIO_SAMPLE_RATE_TYPE__C;


typedef enum agora_rtc__VIDEO_CODEC_TYPE_FOR_STREAM__C
{
  VIDEO_CODEC_H264_FOR_STREAM= 1,
VIDEO_CODEC_H265_FOR_STREAM= 2,
} agora_rtc__VIDEO_CODEC_TYPE_FOR_STREAM__C;


typedef enum agora_rtc__VIDEO_CODEC_PROFILE_TYPE__C
{
  VIDEO_CODEC_PROFILE_BASELINE= 66,
VIDEO_CODEC_PROFILE_MAIN= 77,
VIDEO_CODEC_PROFILE_HIGH= 100,
} agora_rtc__VIDEO_CODEC_PROFILE_TYPE__C;


typedef enum agora_rtc__AUDIO_CODEC_PROFILE_TYPE__C
{
  AUDIO_CODEC_PROFILE_LC_AAC= 0,
AUDIO_CODEC_PROFILE_HE_AAC= 1,
AUDIO_CODEC_PROFILE_HE_AAC_V2= 2,
} agora_rtc__AUDIO_CODEC_PROFILE_TYPE__C;


typedef struct agora_rtc__LocalAudioStats__C
{
  int numChannels;
int sentSampleRate;
int sentBitrate;
int internalCodec;
unsigned short txPacketLossRate;
int audioDeviceDelay;
} agora_rtc__LocalAudioStats__C;


typedef enum agora_rtc__RTMP_STREAM_PUBLISH_STATE__C
{
  RTMP_STREAM_PUBLISH_STATE_IDLE= 0,
RTMP_STREAM_PUBLISH_STATE_CONNECTING= 1,
RTMP_STREAM_PUBLISH_STATE_RUNNING= 2,
RTMP_STREAM_PUBLISH_STATE_RECOVERING= 3,
RTMP_STREAM_PUBLISH_STATE_FAILURE= 4,
RTMP_STREAM_PUBLISH_STATE_DISCONNECTING= 5,
} agora_rtc__RTMP_STREAM_PUBLISH_STATE__C;


typedef enum agora_rtc__RTMP_STREAM_PUBLISH_ERROR_TYPE__C
{
  RTMP_STREAM_PUBLISH_ERROR_OK= 0,
RTMP_STREAM_PUBLISH_ERROR_INVALID_ARGUMENT= 1,
RTMP_STREAM_PUBLISH_ERROR_ENCRYPTED_STREAM_NOT_ALLOWED= 2,
RTMP_STREAM_PUBLISH_ERROR_CONNECTION_TIMEOUT= 3,
RTMP_STREAM_PUBLISH_ERROR_INTERNAL_SERVER_ERROR= 4,
RTMP_STREAM_PUBLISH_ERROR_RTMP_SERVER_ERROR= 5,
RTMP_STREAM_PUBLISH_ERROR_TOO_OFTEN= 6,
RTMP_STREAM_PUBLISH_ERROR_REACH_LIMIT= 7,
RTMP_STREAM_PUBLISH_ERROR_NOT_AUTHORIZED= 8,
RTMP_STREAM_PUBLISH_ERROR_STREAM_NOT_FOUND= 9,
RTMP_STREAM_PUBLISH_ERROR_FORMAT_NOT_SUPPORTED= 10,
RTMP_STREAM_PUBLISH_ERROR_NOT_BROADCASTER= 11,
RTMP_STREAM_PUBLISH_ERROR_TRANSCODING_NO_MIX_STREAM= 13,
RTMP_STREAM_PUBLISH_ERROR_NET_DOWN= 14,
RTMP_STREAM_PUBLISH_ERROR_INVALID_APPID= 15,
RTMP_STREAM_PUBLISH_ERROR_INVALID_PRIVILEGE= 16,
RTMP_STREAM_UNPUBLISH_ERROR_OK= 100,
} agora_rtc__RTMP_STREAM_PUBLISH_ERROR_TYPE__C;


typedef enum agora_rtc__RTMP_STREAMING_EVENT__C
{
  RTMP_STREAMING_EVENT_FAILED_LOAD_IMAGE= 1,
RTMP_STREAMING_EVENT_URL_ALREADY_IN_USE= 2,
RTMP_STREAMING_EVENT_ADVANCED_FEATURE_NOT_SUPPORT= 3,
RTMP_STREAMING_EVENT_REQUEST_TOO_OFTEN= 4,
} agora_rtc__RTMP_STREAMING_EVENT__C;


typedef struct agora_rtc__RtcImage__C
{
  const char* url;
int x;
int y;
int width;
int height;
int zOrder;
double alpha;
} agora_rtc__RtcImage__C;


typedef struct agora_rtc__LiveStreamAdvancedFeature__C
{
  const char* featureName;
bool opened;
} agora_rtc__LiveStreamAdvancedFeature__C;


typedef enum agora_rtc__CONNECTION_STATE_TYPE__C
{
  CONNECTION_STATE_DISCONNECTED= 1,
CONNECTION_STATE_CONNECTING= 2,
CONNECTION_STATE_CONNECTED= 3,
CONNECTION_STATE_RECONNECTING= 4,
CONNECTION_STATE_FAILED= 5,
} agora_rtc__CONNECTION_STATE_TYPE__C;


typedef struct agora_rtc__TranscodingUser__C
{
  agora_rtc__uid_t__C uid;
int x;
int y;
int width;
int height;
int zOrder;
double alpha;
int audioChannel;
} agora_rtc__TranscodingUser__C;


typedef struct agora_rtc__LiveTranscoding__C
{
  int width;
int height;
int videoBitrate;
int videoFramerate;
bool lowLatency;
int videoGop;
agora_rtc__VIDEO_CODEC_PROFILE_TYPE__C videoCodecProfile;
unsigned int backgroundColor;
agora_rtc__VIDEO_CODEC_TYPE_FOR_STREAM__C videoCodecType;
unsigned int userCount;
agora_rtc__TranscodingUser__C* transcodingUsers;
const char* transcodingExtraInfo;
const char* metadata;
agora_rtc__RtcImage__C* watermark;
unsigned int watermarkCount;
agora_rtc__RtcImage__C* backgroundImage;
unsigned int backgroundImageCount;
agora_rtc__AUDIO_SAMPLE_RATE_TYPE__C audioSampleRate;
int audioBitrate;
int audioChannels;
agora_rtc__AUDIO_CODEC_PROFILE_TYPE__C audioCodecProfile;
agora_rtc__LiveStreamAdvancedFeature__C* advancedFeatures;
unsigned int advancedFeatureCount;
} agora_rtc__LiveTranscoding__C;


typedef struct agora_rtc__TranscodingVideoStream__C
{
  agora_rtc__VIDEO_SOURCE_TYPE__C sourceType;
agora_rtc__uid_t__C remoteUserUid;
const char* imageUrl;
int mediaPlayerId;
int x;
int y;
int width;
int height;
int zOrder;
double alpha;
bool mirror;
} agora_rtc__TranscodingVideoStream__C;


typedef struct agora_rtc__LocalTranscoderConfiguration__C
{
  unsigned int streamCount;
agora_rtc__TranscodingVideoStream__C* videoInputStreams;
agora_rtc__VideoEncoderConfiguration__C videoOutputConfiguration;
bool syncWithPrimaryCamera;
} agora_rtc__LocalTranscoderConfiguration__C;


typedef enum agora_rtc__VIDEO_TRANSCODER_ERROR__C
{
  VT_ERR_OK= 0,
VT_ERR_VIDEO_SOURCE_NOT_READY= 1,
VT_ERR_INVALID_VIDEO_SOURCE_TYPE= 2,
VT_ERR_INVALID_IMAGE_PATH= 3,
VT_ERR_UNSUPPORT_IMAGE_FORMAT= 4,
VT_ERR_INVALID_LAYOUT= 5,
VT_ERR_INTERNAL= 20,
} agora_rtc__VIDEO_TRANSCODER_ERROR__C;


typedef struct agora_rtc__LastmileProbeConfig__C
{
  bool probeUplink;
bool probeDownlink;
unsigned int expectedUplinkBitrate;
unsigned int expectedDownlinkBitrate;
} agora_rtc__LastmileProbeConfig__C;


typedef enum agora_rtc__LASTMILE_PROBE_RESULT_STATE__C
{
  LASTMILE_PROBE_RESULT_COMPLETE= 1,
LASTMILE_PROBE_RESULT_INCOMPLETE_NO_BWE= 2,
LASTMILE_PROBE_RESULT_UNAVAILABLE= 3,
} agora_rtc__LASTMILE_PROBE_RESULT_STATE__C;


typedef struct agora_rtc__LastmileProbeOneWayResult__C
{
  unsigned int packetLossRate;
unsigned int jitter;
unsigned int availableBandwidth;
} agora_rtc__LastmileProbeOneWayResult__C;


typedef struct agora_rtc__LastmileProbeResult__C
{
  agora_rtc__LASTMILE_PROBE_RESULT_STATE__C state;
agora_rtc__LastmileProbeOneWayResult__C uplinkReport;
agora_rtc__LastmileProbeOneWayResult__C downlinkReport;
unsigned int rtt;
} agora_rtc__LastmileProbeResult__C;


typedef enum agora_rtc__CONNECTION_CHANGED_REASON_TYPE__C
{
  CONNECTION_CHANGED_CONNECTING= 0,
CONNECTION_CHANGED_JOIN_SUCCESS= 1,
CONNECTION_CHANGED_INTERRUPTED= 2,
CONNECTION_CHANGED_BANNED_BY_SERVER= 3,
CONNECTION_CHANGED_JOIN_FAILED= 4,
CONNECTION_CHANGED_LEAVE_CHANNEL= 5,
CONNECTION_CHANGED_INVALID_APP_ID= 6,
CONNECTION_CHANGED_INVALID_CHANNEL_NAME= 7,
CONNECTION_CHANGED_INVALID_TOKEN= 8,
CONNECTION_CHANGED_TOKEN_EXPIRED= 9,
CONNECTION_CHANGED_REJECTED_BY_SERVER= 10,
CONNECTION_CHANGED_SETTING_PROXY_SERVER= 11,
CONNECTION_CHANGED_RENEW_TOKEN= 12,
CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED= 13,
CONNECTION_CHANGED_KEEP_ALIVE_TIMEOUT= 14,
CONNECTION_CHANGED_REJOIN_SUCCESS= 15,
CONNECTION_CHANGED_LOST= 16,
CONNECTION_CHANGED_ECHO_TEST= 17,
CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED_BY_USER= 18,
CONNECTION_CHANGED_SAME_UID_LOGIN= 19,
CONNECTION_CHANGED_TOO_MANY_BROADCASTERS= 20,
CONNECTION_CHANGED_LICENSE_VALIDATION_FAILURE= 21,
CONNECTION_CHANGED_CERTIFICATION_VERYFY_FAILURE= 22,
} agora_rtc__CONNECTION_CHANGED_REASON_TYPE__C;


typedef enum agora_rtc__CLIENT_ROLE_CHANGE_FAILED_REASON__C
{
  CLIENT_ROLE_CHANGE_FAILED_TOO_MANY_BROADCASTERS= 1,
CLIENT_ROLE_CHANGE_FAILED_NOT_AUTHORIZED= 2,
CLIENT_ROLE_CHANGE_FAILED_REQUEST_TIME_OUT= 3,
CLIENT_ROLE_CHANGE_FAILED_CONNECTION_FAILED= 4,
} agora_rtc__CLIENT_ROLE_CHANGE_FAILED_REASON__C;


typedef enum agora_rtc__WLACC_MESSAGE_REASON__C
{
  WLACC_MESSAGE_REASON_WEAK_SIGNAL= 0,
WLACC_MESSAGE_REASON_CHANNEL_CONGESTION= 1,
} agora_rtc__WLACC_MESSAGE_REASON__C;


typedef enum agora_rtc__WLACC_SUGGEST_ACTION__C
{
  WLACC_SUGGEST_ACTION_CLOSE_TO_WIFI= 0,
WLACC_SUGGEST_ACTION_CONNECT_SSID= 1,
WLACC_SUGGEST_ACTION_CHECK_5G= 2,
WLACC_SUGGEST_ACTION_MODIFY_SSID= 3,
} agora_rtc__WLACC_SUGGEST_ACTION__C;


typedef struct agora_rtc__WlAccStats__C
{
  unsigned short e2eDelayPercent;
unsigned short frozenRatioPercent;
unsigned short lossRatePercent;
} agora_rtc__WlAccStats__C;


typedef enum agora_rtc__NETWORK_TYPE__C
{
  NETWORK_TYPE_UNKNOWN= -1,
NETWORK_TYPE_DISCONNECTED= 0,
NETWORK_TYPE_LAN= 1,
NETWORK_TYPE_WIFI= 2,
NETWORK_TYPE_MOBILE_2G= 3,
NETWORK_TYPE_MOBILE_3G= 4,
NETWORK_TYPE_MOBILE_4G= 5,
NETWORK_TYPE_MOBILE_5G= 6,
} agora_rtc__NETWORK_TYPE__C;


typedef enum agora_rtc__VIDEO_VIEW_SETUP_MODE__C
{
  VIDEO_VIEW_SETUP_REPLACE= 0,
VIDEO_VIEW_SETUP_ADD= 1,
VIDEO_VIEW_SETUP_REMOVE= 2,
} agora_rtc__VIDEO_VIEW_SETUP_MODE__C;


typedef struct agora_rtc__VideoCanvas__C
{
  agora__view_t__C view;
agora_rtc__uid_t__C uid;
uint32_t backgroundColor;
agora_media_base__RENDER_MODE_TYPE__C renderMode;
agora_rtc__VIDEO_MIRROR_MODE_TYPE__C mirrorMode;
agora_rtc__VIDEO_VIEW_SETUP_MODE__C setupMode;
agora_rtc__VIDEO_SOURCE_TYPE__C sourceType;
int mediaPlayerId;
agora_rtc__Rectangle__C cropArea;
bool enableAlphaMask;
} agora_rtc__VideoCanvas__C;


typedef enum agora_rtc__LIGHTENING_CONTRAST_LEVEL__C
{
  LIGHTENING_CONTRAST_LOW= 0,
LIGHTENING_CONTRAST_NORMAL= 1,
LIGHTENING_CONTRAST_HIGH= 2,
} agora_rtc__LIGHTENING_CONTRAST_LEVEL__C;


typedef struct agora_rtc__BeautyOptions__C
{
  agora_rtc__LIGHTENING_CONTRAST_LEVEL__C lighteningContrastLevel;
float lighteningLevel;
float smoothnessLevel;
float rednessLevel;
float sharpnessLevel;
} agora_rtc__BeautyOptions__C;


typedef enum agora_rtc__LOW_LIGHT_ENHANCE_MODE__C
{
  LOW_LIGHT_ENHANCE_AUTO= 0,
LOW_LIGHT_ENHANCE_MANUAL= 1,
} agora_rtc__LOW_LIGHT_ENHANCE_MODE__C;


typedef enum agora_rtc__LOW_LIGHT_ENHANCE_LEVEL__C
{
  LOW_LIGHT_ENHANCE_LEVEL_HIGH_QUALITY= 0,
LOW_LIGHT_ENHANCE_LEVEL_FAST= 1,
} agora_rtc__LOW_LIGHT_ENHANCE_LEVEL__C;


typedef struct agora_rtc__LowlightEnhanceOptions__C
{
  agora_rtc__LOW_LIGHT_ENHANCE_MODE__C mode;
agora_rtc__LOW_LIGHT_ENHANCE_LEVEL__C level;
} agora_rtc__LowlightEnhanceOptions__C;


typedef enum agora_rtc__VIDEO_DENOISER_MODE__C
{
  VIDEO_DENOISER_AUTO= 0,
VIDEO_DENOISER_MANUAL= 1,
} agora_rtc__VIDEO_DENOISER_MODE__C;


typedef enum agora_rtc__VIDEO_DENOISER_LEVEL__C
{
  VIDEO_DENOISER_LEVEL_HIGH_QUALITY= 0,
VIDEO_DENOISER_LEVEL_FAST= 1,
VIDEO_DENOISER_LEVEL_STRENGTH= 2,
} agora_rtc__VIDEO_DENOISER_LEVEL__C;


typedef struct agora_rtc__VideoDenoiserOptions__C
{
  agora_rtc__VIDEO_DENOISER_MODE__C mode;
agora_rtc__VIDEO_DENOISER_LEVEL__C level;
} agora_rtc__VideoDenoiserOptions__C;


typedef struct agora_rtc__ColorEnhanceOptions__C
{
  float strengthLevel;
float skinProtectLevel;
} agora_rtc__ColorEnhanceOptions__C;


typedef enum agora_rtc__BACKGROUND_SOURCE_TYPE__C
{
  BACKGROUND_NONE= 0,
BACKGROUND_COLOR= 1,
BACKGROUND_IMG= 2,
BACKGROUND_BLUR= 3,
BACKGROUND_VIDEO= 4,
} agora_rtc__BACKGROUND_SOURCE_TYPE__C;


typedef enum agora_rtc__BACKGROUND_BLUR_DEGREE__C
{
  BLUR_DEGREE_LOW= 1,
BLUR_DEGREE_MEDIUM= 2,
BLUR_DEGREE_HIGH= 3,
} agora_rtc__BACKGROUND_BLUR_DEGREE__C;


typedef struct agora_rtc__VirtualBackgroundSource__C
{
  agora_rtc__BACKGROUND_SOURCE_TYPE__C background_source_type;
unsigned int color;
const char* source;
agora_rtc__BACKGROUND_BLUR_DEGREE__C blur_degree;
} agora_rtc__VirtualBackgroundSource__C;


typedef enum agora_rtc__SEG_MODEL_TYPE__C
{
  SEG_MODEL_AI= 1,
SEG_MODEL_GREEN= 2,
} agora_rtc__SEG_MODEL_TYPE__C;


typedef struct agora_rtc__SegmentationProperty__C
{
  agora_rtc__SEG_MODEL_TYPE__C modelType;
float greenCapacity;
} agora_rtc__SegmentationProperty__C;


typedef enum agora_rtc__AUDIO_TRACK_TYPE__C
{
  AUDIO_TRACK_INVALID= -1,
AUDIO_TRACK_MIXABLE= 0,
AUDIO_TRACK_DIRECT= 1,
} agora_rtc__AUDIO_TRACK_TYPE__C;


typedef struct agora_rtc__AudioTrackConfig__C
{
  bool enableLocalPlayback;
} agora_rtc__AudioTrackConfig__C;


typedef enum agora_rtc__VOICE_BEAUTIFIER_PRESET__C
{
  VOICE_BEAUTIFIER_OFF= 0x00000000,
CHAT_BEAUTIFIER_MAGNETIC= 0x01010100,
CHAT_BEAUTIFIER_FRESH= 0x01010200,
CHAT_BEAUTIFIER_VITALITY= 0x01010300,
SINGING_BEAUTIFIER= 0x01020100,
TIMBRE_TRANSFORMATION_VIGOROUS= 0x01030100,
TIMBRE_TRANSFORMATION_DEEP= 0x01030200,
TIMBRE_TRANSFORMATION_MELLOW= 0x01030300,
TIMBRE_TRANSFORMATION_FALSETTO= 0x01030400,
TIMBRE_TRANSFORMATION_FULL= 0x01030500,
TIMBRE_TRANSFORMATION_CLEAR= 0x01030600,
TIMBRE_TRANSFORMATION_RESOUNDING= 0x01030700,
TIMBRE_TRANSFORMATION_RINGING= 0x01030800,
ULTRA_HIGH_QUALITY_VOICE= 0x01040100,
} agora_rtc__VOICE_BEAUTIFIER_PRESET__C;


typedef enum agora_rtc__AUDIO_EFFECT_PRESET__C
{
  AUDIO_EFFECT_OFF= 0x00000000,
ROOM_ACOUSTICS_KTV= 0x02010100,
ROOM_ACOUSTICS_VOCAL_CONCERT= 0x02010200,
ROOM_ACOUSTICS_STUDIO= 0x02010300,
ROOM_ACOUSTICS_PHONOGRAPH= 0x02010400,
ROOM_ACOUSTICS_VIRTUAL_STEREO= 0x02010500,
ROOM_ACOUSTICS_SPACIAL= 0x02010600,
ROOM_ACOUSTICS_ETHEREAL= 0x02010700,
ROOM_ACOUSTICS_3D_VOICE= 0x02010800,
ROOM_ACOUSTICS_VIRTUAL_SURROUND_SOUND= 0x02010900,
VOICE_CHANGER_EFFECT_UNCLE= 0x02020100,
VOICE_CHANGER_EFFECT_OLDMAN= 0x02020200,
VOICE_CHANGER_EFFECT_BOY= 0x02020300,
VOICE_CHANGER_EFFECT_SISTER= 0x02020400,
VOICE_CHANGER_EFFECT_GIRL= 0x02020500,
VOICE_CHANGER_EFFECT_PIGKING= 0x02020600,
VOICE_CHANGER_EFFECT_HULK= 0x02020700,
STYLE_TRANSFORMATION_RNB= 0x02030100,
STYLE_TRANSFORMATION_POPULAR= 0x02030200,
PITCH_CORRECTION= 0x02040100,
} agora_rtc__AUDIO_EFFECT_PRESET__C;


typedef enum agora_rtc__VOICE_CONVERSION_PRESET__C
{
  VOICE_CONVERSION_OFF= 0x00000000,
VOICE_CHANGER_NEUTRAL= 0x03010100,
VOICE_CHANGER_SWEET= 0x03010200,
VOICE_CHANGER_SOLID= 0x03010300,
VOICE_CHANGER_BASS= 0x03010400,
VOICE_CHANGER_CARTOON= 0x03010500,
VOICE_CHANGER_CHILDLIKE= 0x03010600,
VOICE_CHANGER_PHONE_OPERATOR= 0x03010700,
VOICE_CHANGER_MONSTER= 0x03010800,
VOICE_CHANGER_TRANSFORMERS= 0x03010900,
VOICE_CHANGER_GROOT= 0x03010A00,
VOICE_CHANGER_DARTH_VADER= 0x03010B00,
VOICE_CHANGER_IRON_LADY= 0x03010C00,
VOICE_CHANGER_SHIN_CHAN= 0x03010D00,
VOICE_CHANGER_GIRLISH_MAN= 0x03010E00,
VOICE_CHANGER_CHIPMUNK= 0x03010F00,
} agora_rtc__VOICE_CONVERSION_PRESET__C;


typedef enum agora_rtc__HEADPHONE_EQUALIZER_PRESET__C
{
  HEADPHONE_EQUALIZER_OFF= 0x00000000,
HEADPHONE_EQUALIZER_OVEREAR= 0x04000001,
HEADPHONE_EQUALIZER_INEAR= 0x04000002,
} agora_rtc__HEADPHONE_EQUALIZER_PRESET__C;


typedef struct agora_rtc__ScreenCaptureParameters__C
{
  agora_rtc__VideoDimensions__C dimensions;
int frameRate;
int bitrate;
bool captureMouseCursor;
bool windowFocus;
agora__view_t__C* excludeWindowList;
int excludeWindowCount;
int highLightWidth;
unsigned int highLightColor;
bool enableHighLight;
} agora_rtc__ScreenCaptureParameters__C;


typedef enum agora_rtc__AUDIO_RECORDING_QUALITY_TYPE__C
{
  AUDIO_RECORDING_QUALITY_LOW= 0,
AUDIO_RECORDING_QUALITY_MEDIUM= 1,
AUDIO_RECORDING_QUALITY_HIGH= 2,
AUDIO_RECORDING_QUALITY_ULTRA_HIGH= 3,
} agora_rtc__AUDIO_RECORDING_QUALITY_TYPE__C;


typedef enum agora_rtc__AUDIO_FILE_RECORDING_TYPE__C
{
  AUDIO_FILE_RECORDING_MIC= 1,
AUDIO_FILE_RECORDING_PLAYBACK= 2,
AUDIO_FILE_RECORDING_MIXED= 3,
} agora_rtc__AUDIO_FILE_RECORDING_TYPE__C;


typedef enum agora_rtc__AUDIO_ENCODED_FRAME_OBSERVER_POSITION__C
{
  AUDIO_ENCODED_FRAME_OBSERVER_POSITION_RECORD= 1,
AUDIO_ENCODED_FRAME_OBSERVER_POSITION_PLAYBACK= 2,
AUDIO_ENCODED_FRAME_OBSERVER_POSITION_MIXED= 3,
} agora_rtc__AUDIO_ENCODED_FRAME_OBSERVER_POSITION__C;


typedef struct agora_rtc__AudioRecordingConfiguration__C
{
  const char* filePath;
bool encode;
int sampleRate;
agora_rtc__AUDIO_FILE_RECORDING_TYPE__C fileRecordingType;
agora_rtc__AUDIO_RECORDING_QUALITY_TYPE__C quality;
int recordingChannel;
} agora_rtc__AudioRecordingConfiguration__C;


typedef struct agora_rtc__AudioEncodedFrameObserverConfig__C
{
  agora_rtc__AUDIO_ENCODED_FRAME_OBSERVER_POSITION__C postionType;
agora_rtc__AUDIO_ENCODING_TYPE__C encodingType;
} agora_rtc__AudioEncodedFrameObserverConfig__C;

typedef void* agora_rtc__IAudioEncodedFrameObserver__Handle;

void agora_rtc__IAudioEncodedFrameObserver__onRecordAudioEncodedFrame(agora_rtc__IAudioEncodedFrameObserver__Handle handle,const uint8_t* frameBuffer,int length,const agora_rtc__EncodedAudioFrameInfo__C& audioEncodedFrameInfo);
void agora_rtc__IAudioEncodedFrameObserver__onPlaybackAudioEncodedFrame(agora_rtc__IAudioEncodedFrameObserver__Handle handle,const uint8_t* frameBuffer,int length,const agora_rtc__EncodedAudioFrameInfo__C& audioEncodedFrameInfo);
void agora_rtc__IAudioEncodedFrameObserver__onMixedAudioEncodedFrame(agora_rtc__IAudioEncodedFrameObserver__Handle handle,const uint8_t* frameBuffer,int length,const agora_rtc__EncodedAudioFrameInfo__C& audioEncodedFrameInfo);

typedef enum agora_rtc__AREA_CODE__C
{
  AREA_CODE_CN= 0x00000001,
AREA_CODE_NA= 0x00000002,
AREA_CODE_EU= 0x00000004,
AREA_CODE_AS= 0x00000008,
AREA_CODE_JP= 0x00000010,
AREA_CODE_IN= 0x00000020,
AREA_CODE_GLOB= (0xFFFFFFFF),
} agora_rtc__AREA_CODE__C;


typedef enum agora_rtc__AREA_CODE_EX__C
{
  AREA_CODE_OC= 0x00000040,
AREA_CODE_SA= 0x00000080,
AREA_CODE_AF= 0x00000100,
AREA_CODE_KR= 0x00000200,
AREA_CODE_HKMC= 0x00000400,
AREA_CODE_US= 0x00000800,
AREA_CODE_OVS= 0xFFFFFFFE,
} agora_rtc__AREA_CODE_EX__C;


typedef enum agora_rtc__CHANNEL_MEDIA_RELAY_ERROR__C
{
  RELAY_OK= 0,
RELAY_ERROR_SERVER_ERROR_RESPONSE= 1,
RELAY_ERROR_SERVER_NO_RESPONSE= 2,
RELAY_ERROR_NO_RESOURCE_AVAILABLE= 3,
RELAY_ERROR_FAILED_JOIN_SRC= 4,
RELAY_ERROR_FAILED_JOIN_DEST= 5,
RELAY_ERROR_FAILED_PACKET_RECEIVED_FROM_SRC= 6,
RELAY_ERROR_FAILED_PACKET_SENT_TO_DEST= 7,
RELAY_ERROR_SERVER_CONNECTION_LOST= 8,
RELAY_ERROR_INTERNAL_ERROR= 9,
RELAY_ERROR_SRC_TOKEN_EXPIRED= 10,
RELAY_ERROR_DEST_TOKEN_EXPIRED= 11,
} agora_rtc__CHANNEL_MEDIA_RELAY_ERROR__C;


typedef enum agora_rtc__CHANNEL_MEDIA_RELAY_EVENT__C
{
  RELAY_EVENT_NETWORK_DISCONNECTED= 0,
RELAY_EVENT_NETWORK_CONNECTED= 1,
RELAY_EVENT_PACKET_JOINED_SRC_CHANNEL= 2,
RELAY_EVENT_PACKET_JOINED_DEST_CHANNEL= 3,
RELAY_EVENT_PACKET_SENT_TO_DEST_CHANNEL= 4,
RELAY_EVENT_PACKET_RECEIVED_VIDEO_FROM_SRC= 5,
RELAY_EVENT_PACKET_RECEIVED_AUDIO_FROM_SRC= 6,
RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL= 7,
RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_REFUSED= 8,
RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE= 9,
RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_IS_NULL= 10,
RELAY_EVENT_VIDEO_PROFILE_UPDATE= 11,
RELAY_EVENT_PAUSE_SEND_PACKET_TO_DEST_CHANNEL_SUCCESS= 12,
RELAY_EVENT_PAUSE_SEND_PACKET_TO_DEST_CHANNEL_FAILED= 13,
RELAY_EVENT_RESUME_SEND_PACKET_TO_DEST_CHANNEL_SUCCESS= 14,
RELAY_EVENT_RESUME_SEND_PACKET_TO_DEST_CHANNEL_FAILED= 15,
} agora_rtc__CHANNEL_MEDIA_RELAY_EVENT__C;


typedef enum agora_rtc__CHANNEL_MEDIA_RELAY_STATE__C
{
  RELAY_STATE_IDLE= 0,
RELAY_STATE_CONNECTING= 1,
RELAY_STATE_RUNNING= 2,
RELAY_STATE_FAILURE= 3,
} agora_rtc__CHANNEL_MEDIA_RELAY_STATE__C;


typedef struct agora_rtc__ChannelMediaInfo__C
{
  const char* channelName;
const char* token;
agora_rtc__uid_t__C uid;
} agora_rtc__ChannelMediaInfo__C;


typedef struct agora_rtc__ChannelMediaRelayConfiguration__C
{
  agora_rtc__ChannelMediaInfo__C* srcInfo;
agora_rtc__ChannelMediaInfo__C* destInfos;
int destCount;
} agora_rtc__ChannelMediaRelayConfiguration__C;


typedef struct agora_rtc__UplinkNetworkInfo__C
{
  int video_encoder_target_bitrate_bps;
} agora_rtc__UplinkNetworkInfo__C;


typedef struct agora_rtc__PeerDownlinkInfo__C
{
  const char* uid;
agora_rtc__VIDEO_STREAM_TYPE__C stream_type;
agora_rtc__REMOTE_VIDEO_DOWNSCALE_LEVEL__C current_downscale_level;
int expected_bitrate_bps;
} agora_rtc__PeerDownlinkInfo__C;


typedef struct agora_rtc__DownlinkNetworkInfo__C
{
  int lastmile_buffer_delay_time_ms;
int bandwidth_estimation_bps;
int total_downscale_level_count;
agora_rtc__PeerDownlinkInfo__C* peer_downlink_info;
int total_received_video_count;
} agora_rtc__DownlinkNetworkInfo__C;


typedef enum agora_rtc__ENCRYPTION_MODE__C
{
  AES_128_XTS= 1,
AES_128_ECB= 2,
AES_256_XTS= 3,
SM4_128_ECB= 4,
AES_128_GCM= 5,
AES_256_GCM= 6,
AES_128_GCM2= 7,
AES_256_GCM2= 8,
MODE_END,
} agora_rtc__ENCRYPTION_MODE__C;


typedef struct agora_rtc__EncryptionConfig__C
{
  agora_rtc__ENCRYPTION_MODE__C encryptionMode;
const char* encryptionKey;
uint8_t encryptionKdfSalt[8];
} agora_rtc__EncryptionConfig__C;


typedef enum agora_rtc__ENCRYPTION_ERROR_TYPE__C
{
  ENCRYPTION_ERROR_INTERNAL_FAILURE= 0,
ENCRYPTION_ERROR_DECRYPTION_FAILURE= 1,
ENCRYPTION_ERROR_ENCRYPTION_FAILURE= 2,
} agora_rtc__ENCRYPTION_ERROR_TYPE__C;


typedef enum agora_rtc__UPLOAD_ERROR_REASON__C
{
  UPLOAD_SUCCESS= 0,
UPLOAD_NET_ERROR= 1,
UPLOAD_SERVER_ERROR= 2,
} agora_rtc__UPLOAD_ERROR_REASON__C;


typedef enum agora_rtc__PERMISSION_TYPE__C
{
  RECORD_AUDIO= 0,
CAMERA= 1,
SCREEN_CAPTURE= 2,
} agora_rtc__PERMISSION_TYPE__C;


typedef enum agora_rtc__MAX_USER_ACCOUNT_LENGTH_TYPE__C
{
  MAX_USER_ACCOUNT_LENGTH= 256,
} agora_rtc__MAX_USER_ACCOUNT_LENGTH_TYPE__C;


typedef enum agora_rtc__STREAM_SUBSCRIBE_STATE__C
{
  SUB_STATE_IDLE= 0,
SUB_STATE_NO_SUBSCRIBED= 1,
SUB_STATE_SUBSCRIBING= 2,
SUB_STATE_SUBSCRIBED= 3,
} agora_rtc__STREAM_SUBSCRIBE_STATE__C;


typedef enum agora_rtc__STREAM_PUBLISH_STATE__C
{
  PUB_STATE_IDLE= 0,
PUB_STATE_NO_PUBLISHED= 1,
PUB_STATE_PUBLISHING= 2,
PUB_STATE_PUBLISHED= 3,
} agora_rtc__STREAM_PUBLISH_STATE__C;


typedef struct agora_rtc__EchoTestConfiguration__C
{
  agora__view_t__C view;
bool enableAudio;
bool enableVideo;
const char* token;
const char* channelId;
int intervalInSeconds;
} agora_rtc__EchoTestConfiguration__C;


typedef struct agora_rtc__UserInfo__C
{
  agora_rtc__uid_t__C uid;
char userAccount[256];
} agora_rtc__UserInfo__C;


typedef enum agora_rtc__EAR_MONITORING_FILTER_TYPE__C
{
  EAR_MONITORING_FILTER_NONE= (1<<0),
EAR_MONITORING_FILTER_BUILT_IN_AUDIO_FILTERS= (1<<1),
EAR_MONITORING_FILTER_NOISE_SUPPRESSION= (1<<2),
} agora_rtc__EAR_MONITORING_FILTER_TYPE__C;


typedef enum agora_rtc__THREAD_PRIORITY_TYPE__C
{
  LOWEST= 0,
LOW= 1,
NORMAL= 2,
HIGH= 3,
HIGHEST= 4,
CRITICAL= 5,
} agora_rtc__THREAD_PRIORITY_TYPE__C;


typedef struct agora_rtc__ScreenVideoParameters__C
{
  agora_rtc__VideoDimensions__C dimensions;
int frameRate;
int bitrate;
agora_rtc__VIDEO_CONTENT_HINT__C contentHint;
} agora_rtc__ScreenVideoParameters__C;


typedef struct agora_rtc__ScreenAudioParameters__C
{
  int sampleRate;
int channels;
int captureSignalVolume;
} agora_rtc__ScreenAudioParameters__C;


typedef struct agora_rtc__ScreenCaptureParameters2__C
{
  bool captureAudio;
agora_rtc__ScreenAudioParameters__C audioParams;
bool captureVideo;
agora_rtc__ScreenVideoParameters__C videoParams;
} agora_rtc__ScreenCaptureParameters2__C;


typedef enum agora_rtc__MEDIA_TRACE_EVENT__C
{
  MEDIA_TRACE_EVENT_VIDEO_RENDERED= 0,
MEDIA_TRACE_EVENT_VIDEO_DECODED,
} agora_rtc__MEDIA_TRACE_EVENT__C;


typedef struct agora_rtc__VideoRenderingTracingInfo__C
{
  int elapsedTime;
int start2JoinChannel;
int join2JoinSuccess;
int joinSuccess2RemoteJoined;
int remoteJoined2SetView;
int remoteJoined2UnmuteVideo;
int remoteJoined2PacketReceived;
} agora_rtc__VideoRenderingTracingInfo__C;


typedef enum agora_rtc__CONFIG_FETCH_TYPE__C
{
  CONFIG_FETCH_TYPE_INITIALIZE= 1,
CONFIG_FETCH_TYPE_JOIN_CHANNEL= 2,
} agora_rtc__CONFIG_FETCH_TYPE__C;


typedef struct agora_rtc__RecorderStreamInfo__C
{
  const char* channelId;
agora_rtc__uid_t__C uid;
} agora_rtc__RecorderStreamInfo__C;


typedef enum agora_rtc__LOCAL_PROXY_MODE__C
{
  ConnectivityFirst= 0,
LocalOnly= 1,
} agora_rtc__LOCAL_PROXY_MODE__C;


typedef struct agora_rtc__LogUploadServerInfo__C
{
  const char* serverDomain;
const char* serverPath;
int serverPort;
bool serverHttps;
} agora_rtc__LogUploadServerInfo__C;


typedef struct agora_rtc__AdvancedConfigInfo__C
{
  agora_rtc__LogUploadServerInfo__C logUploadServer;
} agora_rtc__AdvancedConfigInfo__C;


typedef struct agora_rtc__LocalAccessPointConfiguration__C
{
  const char* ipList;
int ipListSize;
const char* domainList;
int domainListSize;
const char* verifyDomainName;
agora_rtc__LOCAL_PROXY_MODE__C mode;
agora_rtc__AdvancedConfigInfo__C advancedConfig;
} agora_rtc__LocalAccessPointConfiguration__C;

typedef void* agora_base__IEngineBase__Handle;

int agora_base__IEngineBase__queryInterface(agora_base__IEngineBase__Handle handle,agora_rtc__INTERFACE_ID_TYPE__C iid,void* inter);
typedef void* agora_base__AParameter__Handle;

bool agora_base__AParameter__initialize(agora_base__AParameter__Handle handle,agora_base__IEngineBase__Handle* engine);
typedef void* agora_base__LicenseCallback__Handle;

void agora_base__LicenseCallback__onCertificateRequired(agora_base__LicenseCallback__Handle handle);
void agora_base__LicenseCallback__onLicenseRequest(agora_base__LicenseCallback__Handle handle);
void agora_base__LicenseCallback__onLicenseValidated(agora_base__LicenseCallback__Handle handle);
void agora_base__LicenseCallback__onLicenseError(agora_base__LicenseCallback__Handle handle,int result);

typedef struct agora__SpatialAudioParams__C
{
  double* speaker_azimuth;
double* speaker_elevation;
double* speaker_distance;
int* speaker_orientation;
bool* enable_blur;
bool* enable_air_absorb;
double* speaker_attenuation;
bool* enable_doppler;
} agora__SpatialAudioParams__C;

    
    #endif// AGORABASE_C_H_
    